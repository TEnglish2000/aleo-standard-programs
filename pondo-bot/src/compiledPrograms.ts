/*** GENERATED FILE - DO NOT EDIT ***/
/*** This is generated by the copyFiles.js script ***/

export const pondoPrograms = [
  "credits.aleo",
  "multi_token_support_programv1.aleo",
  "mtsp_creditsv1.aleo",
  "pondo_oraclev1.aleo",
  "pondo_staked_aleo_tokenv1.aleo",
  "pondo_tokenv1.aleo",
  "pondo_delegator1v1.aleo",
  "pondo_delegator2v1.aleo",
  "pondo_delegator3v1.aleo",
  "pondo_delegator4v1.aleo",
  "pondo_delegator5v1.aleo",
  "pondo_core_protocolv1.aleo",
  "reference_delegator.aleo",
  "grant_disbursement.aleo",
  "test_program.aleo"
];

export const pondoDependencyTree: { [key: string]: string[] } = {
  "multi_token_support_programv1.aleo": [
    "credits.aleo"
  ],
  "mtsp_creditsv1.aleo": [
    "credits.aleo",
    "multi_token_support_programv1.aleo"
  ],
  "pondo_core_protocolv1.aleo": [
    "credits.aleo",
    "multi_token_support_programv1.aleo",
    "mtsp_creditsv1.aleo",
    "pondo_oraclev1.aleo",
    "pondo_staked_aleo_tokenv1.aleo",
    "pondo_tokenv1.aleo",
    "pondo_delegator1v1.aleo",
    "pondo_delegator2v1.aleo",
    "pondo_delegator3v1.aleo",
    "pondo_delegator4v1.aleo",
    "pondo_delegator5v1.aleo"
  ],
  "pondo_oraclev1.aleo": [
    "credits.aleo"
  ],
  "pondo_staked_aleo_tokenv1.aleo": [
    "credits.aleo",
    "multi_token_support_programv1.aleo"
  ],
  "pondo_tokenv1.aleo": [
    "credits.aleo",
    "multi_token_support_programv1.aleo"
  ],
  "reference_delegator.aleo": [
    "credits.aleo",
    "pondo_oraclev1.aleo"
  ],
  "pondo_delegator1v1.aleo": [
    "credits.aleo",
    "pondo_oraclev1.aleo"
  ],
  "pondo_delegator2v1.aleo": [
    "credits.aleo",
    "pondo_oraclev1.aleo"
  ],
  "pondo_delegator3v1.aleo": [
    "credits.aleo",
    "pondo_oraclev1.aleo"
  ],
  "pondo_delegator4v1.aleo": [
    "credits.aleo",
    "pondo_oraclev1.aleo"
  ],
  "pondo_delegator5v1.aleo": [
    "credits.aleo",
    "pondo_oraclev1.aleo"
  ],
  "grant_disbursement.aleo": [
    "credits.aleo",
    "multi_token_support_programv1.aleo",
    "mtsp_creditsv1.aleo",
    "pondo_oraclev1.aleo",
    "pondo_staked_aleo_tokenv1.aleo",
    "pondo_tokenv1.aleo",
    "pondo_delegator1v1.aleo",
    "pondo_delegator2v1.aleo",
    "pondo_delegator3v1.aleo",
    "pondo_delegator4v1.aleo",
    "pondo_delegator5v1.aleo",
    "pondo_core_protocolv1.aleo"
  ],
  "test_program.aleo": [
    "credits.aleo",
    "multi_token_support_programv1.aleo",
    "pondo_oraclev1.aleo",
    "pondo_staked_aleo_tokenv1.aleo",
    "pondo_tokenv1.aleo",
    "pondo_delegator1v1.aleo",
    "pondo_delegator2v1.aleo",
    "pondo_delegator3v1.aleo",
    "pondo_delegator4v1.aleo",
    "pondo_delegator5v1.aleo",
    "pondo_core_protocolv1.aleo"
  ]
};

export const pondoProgramToCode: { [key: string]: string } = {
  "multi_token_support_programv1.aleo": "import credits.aleo;\nprogram multi_token_support_programv1.aleo;\n\n\nrecord Token:\n    owner as address.private;\n    amount as u128.private;\n    token_id as field.private;\n    external_authorization_required as boolean.private;\n    authorized_until as u32.private;\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\nstruct Balance:\n    token_id as field;\n    account as address;\n    balance as u128;\n    authorized_until as u32;\n\nstruct Allowance:\n    account as address;\n    spender as address;\n    token_id as field;\n\n\nmapping registered_tokens:\n\tkey as field.public;\n\tvalue as TokenMetadata.public;\n\n\nmapping balances:\n\tkey as field.public;\n\tvalue as Balance.public;\n\n\nmapping authorized_balances:\n\tkey as field.public;\n\tvalue as Balance.public;\n\n\nmapping allowances:\n\tkey as field.public;\n\tvalue as u128.public;\n\n\nmapping roles:\n\tkey as field.public;\n\tvalue as u8.public;\n\n\nfunction transfer_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    cast self.caller r0 into r3 as TokenOwner;\n    hash.bhp256 r3 into r4 as field;\n    cast r1 r0 into r5 as TokenOwner;\n    hash.bhp256 r5 into r6 as field;\n    async transfer_public r0 r1 r2 self.caller r4 r6 into r7;\n    output r7 as multi_token_support_programv1.aleo/transfer_public.future;\n\nfinalize transfer_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as address.public;\n    input r4 as field.public;\n    input r5 as field.public;\n    get authorized_balances[r4] into r6;\n    get registered_tokens[r0] into r7;\n    lte block.height r6.authorized_until into r8;\n    not r7.external_authorization_required into r9;\n    or r8 r9 into r10;\n    assert.eq r10 true;\n    sub r6.balance r2 into r11;\n    cast r0 r3 r11 r6.authorized_until into r12 as Balance;\n    set r12 into authorized_balances[r4];\n    get registered_tokens[r0] into r13;\n    ternary r13.external_authorization_required 0u32 4294967295u32 into r14;\n    cast r0 r1 0u128 r14 into r15 as Balance;\n    get.or_use balances[r5] r15 into r16;\n    get.or_use authorized_balances[r5] r15 into r17;\n    ternary r13.external_authorization_required r16.token_id r17.token_id into r18;\n    ternary r13.external_authorization_required r16.account r17.account into r19;\n    ternary r13.external_authorization_required r16.balance r17.balance into r20;\n    ternary r13.external_authorization_required r16.authorized_until r17.authorized_until into r21;\n    cast r18 r19 r20 r21 into r22 as Balance;\n    add r22.balance r2 into r23;\n    cast r0 r1 r23 r22.authorized_until into r24 as Balance;\n    branch.eq r13.external_authorization_required false to end_then_0_0;\n    set r24 into balances[r5];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    set r24 into authorized_balances[r5];\n    position end_otherwise_0_1;\n\n\n\n\nfunction transfer_public_as_signer:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    cast self.signer r0 into r3 as TokenOwner;\n    hash.bhp256 r3 into r4 as field;\n    cast r1 r0 into r5 as TokenOwner;\n    hash.bhp256 r5 into r6 as field;\n    async transfer_public_as_signer r0 r1 r2 self.signer r4 r6 into r7;\n    output r7 as multi_token_support_programv1.aleo/transfer_public_as_signer.future;\n\nfinalize transfer_public_as_signer:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as address.public;\n    input r4 as field.public;\n    input r5 as field.public;\n    get authorized_balances[r4] into r6;\n    get registered_tokens[r0] into r7;\n    lte block.height r6.authorized_until into r8;\n    not r7.external_authorization_required into r9;\n    or r8 r9 into r10;\n    assert.eq r10 true;\n    sub r6.balance r2 into r11;\n    cast r0 r3 r11 r6.authorized_until into r12 as Balance;\n    set r12 into authorized_balances[r4];\n    get registered_tokens[r0] into r13;\n    ternary r13.external_authorization_required 0u32 4294967295u32 into r14;\n    cast r0 r1 0u128 r14 into r15 as Balance;\n    get.or_use balances[r5] r15 into r16;\n    get.or_use authorized_balances[r5] r15 into r17;\n    ternary r13.external_authorization_required r16.token_id r17.token_id into r18;\n    ternary r13.external_authorization_required r16.account r17.account into r19;\n    ternary r13.external_authorization_required r16.balance r17.balance into r20;\n    ternary r13.external_authorization_required r16.authorized_until r17.authorized_until into r21;\n    cast r18 r19 r20 r21 into r22 as Balance;\n    add r22.balance r2 into r23;\n    cast r0 r1 r23 r22.authorized_until into r24 as Balance;\n    branch.eq r13.external_authorization_required false to end_then_0_2;\n    set r24 into balances[r5];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    set r24 into authorized_balances[r5];\n    position end_otherwise_0_3;\n\n\n\n\nfunction transfer_private:\n    input r0 as address.private;\n    input r1 as u128.private;\n    input r2 as Token.record;\n    sub r2.amount r1 into r3;\n    cast r2.owner r3 r2.token_id r2.external_authorization_required r2.authorized_until into r4 as Token.record;\n    ternary r2.external_authorization_required 0u32 4294967295u32 into r5;\n    cast r0 r1 r2.token_id r2.external_authorization_required r5 into r6 as Token.record;\n    async transfer_private r2.external_authorization_required r2.authorized_until into r7;\n    output r4 as Token.record;\n    output r6 as Token.record;\n    output r7 as multi_token_support_programv1.aleo/transfer_private.future;\n\nfinalize transfer_private:\n    input r0 as boolean.public;\n    input r1 as u32.public;\n    lte block.height r1 into r2;\n    not r0 into r3;\n    or r2 r3 into r4;\n    assert.eq r4 true;\n\n\n\n\nfunction transfer_private_to_public:\n    input r0 as address.public;\n    input r1 as u128.public;\n    input r2 as Token.record;\n    sub r2.amount r1 into r3;\n    cast r2.owner r3 r2.token_id r2.external_authorization_required r2.authorized_until into r4 as Token.record;\n    cast r0 r2.token_id into r5 as TokenOwner;\n    hash.bhp256 r5 into r6 as field;\n    async transfer_private_to_public r2.token_id r0 r1 r2.authorized_until r2.external_authorization_required r6 into r7;\n    output r4 as Token.record;\n    output r7 as multi_token_support_programv1.aleo/transfer_private_to_public.future;\n\nfinalize transfer_private_to_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as u32.public;\n    input r4 as boolean.public;\n    input r5 as field.public;\n    lte block.height r3 into r6;\n    not r4 into r7;\n    or r6 r7 into r8;\n    assert.eq r8 true;\n    get registered_tokens[r0] into r9;\n    ternary r9.external_authorization_required 0u32 4294967295u32 into r10;\n    cast r0 r1 0u128 r10 into r11 as Balance;\n    get.or_use balances[r5] r11 into r12;\n    get.or_use authorized_balances[r5] r11 into r13;\n    ternary r9.external_authorization_required r12.token_id r13.token_id into r14;\n    ternary r9.external_authorization_required r12.account r13.account into r15;\n    ternary r9.external_authorization_required r12.balance r13.balance into r16;\n    ternary r9.external_authorization_required r12.authorized_until r13.authorized_until into r17;\n    cast r14 r15 r16 r17 into r18 as Balance;\n    add r18.balance r2 into r19;\n    cast r0 r1 r19 r18.authorized_until into r20 as Balance;\n    branch.eq r9.external_authorization_required false to end_then_0_4;\n    set r20 into balances[r5];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    set r20 into authorized_balances[r5];\n    position end_otherwise_0_5;\n\n\n\n\nfunction transfer_public_to_private:\n    input r0 as field.public;\n    input r1 as address.private;\n    input r2 as u128.public;\n    input r3 as boolean.public;\n    ternary r3 0u32 4294967295u32 into r4;\n    cast r1 r2 r0 r3 r4 into r5 as Token.record;\n    cast self.caller r0 into r6 as TokenOwner;\n    hash.bhp256 r6 into r7 as field;\n    async transfer_public_to_private r0 r2 self.caller r3 r7 into r8;\n    output r5 as Token.record;\n    output r8 as multi_token_support_programv1.aleo/transfer_public_to_private.future;\n\nfinalize transfer_public_to_private:\n    input r0 as field.public;\n    input r1 as u128.public;\n    input r2 as address.public;\n    input r3 as boolean.public;\n    input r4 as field.public;\n    get registered_tokens[r0] into r5;\n    assert.eq r5.external_authorization_required r3;\n    get authorized_balances[r4] into r6;\n    get registered_tokens[r0] into r7;\n    lte block.height r6.authorized_until into r8;\n    not r7.external_authorization_required into r9;\n    or r8 r9 into r10;\n    assert.eq r10 true;\n    sub r6.balance r1 into r11;\n    cast r0 r2 r11 r6.authorized_until into r12 as Balance;\n    set r12 into authorized_balances[r4];\n\n\n\nfunction join:\n    input r0 as Token.record;\n    input r1 as Token.record;\n    is.eq r0.token_id r1.token_id into r2;\n    assert.eq r2 true;\n    add r0.amount r1.amount into r3;\n    lt r0.authorized_until r1.authorized_until into r4;\n    ternary r4 r0.authorized_until r1.authorized_until into r5;\n    cast r0.owner r3 r0.token_id r0.external_authorization_required r5 into r6 as Token.record;\n    output r6 as Token.record;\n\n\nfunction split:\n    input r0 as Token.record;\n    input r1 as u128.private;\n    gte r0.amount r1 into r2;\n    assert.eq r2 true;\n    cast r0.owner r1 r0.token_id r0.external_authorization_required r0.authorized_until into r3 as Token.record;\n    sub r0.amount r1 into r4;\n    cast r0.owner r4 r0.token_id r0.external_authorization_required r0.authorized_until into r5 as Token.record;\n    output r3 as Token.record;\n    output r5 as Token.record;\n\n\n\nfunction initialize:\n    async initialize into r0;\n    output r0 as multi_token_support_programv1.aleo/initialize.future;\n\nfinalize initialize:\n    contains registered_tokens[3443843282313283355522573239085696902919850365217539366784739393210722344986field] into r0;\n    assert.eq r0 false;\n    cast 3443843282313283355522573239085696902919850365217539366784739393210722344986field 1095517519u128 1095517519u128 6u8 0u128 10_000_000_000_000_000u128 mtsp_creditsv1.aleo false multi_token_support_programv1.aleo into r1 as TokenMetadata;\n    set r1 into registered_tokens[3443843282313283355522573239085696902919850365217539366784739393210722344986field];\n\n\n\n\nfunction register_token:\n    input r0 as field.public;\n    input r1 as u128.public;\n    input r2 as u128.public;\n    input r3 as u8.public;\n    input r4 as u128.public;\n    input r5 as boolean.public;\n    input r6 as address.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r7;\n    assert.eq r7 true;\n    cast r0 r1 r2 r3 0u128 r4 self.caller r5 r6 into r8 as TokenMetadata;\n    async register_token r8 into r9;\n    output r9 as multi_token_support_programv1.aleo/register_token.future;\n\nfinalize register_token:\n    input r0 as TokenMetadata.public;\n    contains registered_tokens[r0.token_id] into r1;\n    assert.eq r1 false;\n    set r0 into registered_tokens[r0.token_id];\n\n\n\n\nfunction update_token_management:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3;\n    assert.eq r3 true;\n    async update_token_management r0 r1 r2 self.caller into r4;\n    output r4 as multi_token_support_programv1.aleo/update_token_management.future;\n\nfinalize update_token_management:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as address.public;\n    get registered_tokens[r0] into r4;\n    assert.eq r3 r4.admin;\n    cast r0 r4.name r4.symbol r4.decimals r4.supply r4.max_supply r1 r4.external_authorization_required r2 into r5 as TokenMetadata;\n    set r5 into registered_tokens[r0];\n\n\n\n\nfunction set_role:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u8.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    is.eq r2 2u8 into r5;\n    or r4 r5 into r6;\n    is.eq r2 3u8 into r7;\n    or r6 r7 into r8;\n    assert.eq r8 true;\n    cast r1 r0 into r9 as TokenOwner;\n    hash.bhp256 r9 into r10 as field;\n    async set_role r0 r2 self.caller r10 into r11;\n    output r11 as multi_token_support_programv1.aleo/set_role.future;\n\nfinalize set_role:\n    input r0 as field.public;\n    input r1 as u8.public;\n    input r2 as address.public;\n    input r3 as field.public;\n    get registered_tokens[r0] into r4;\n    assert.eq r2 r4.admin;\n    set r1 into roles[r3];\n\n\n\n\nfunction remove_role:\n    input r0 as field.public;\n    input r1 as address.public;\n    is.neq r0 3443843282313283355522573239085696902919850365217539366784739393210722344986field into r2;\n    assert.eq r2 true;\n    cast r1 r0 into r3 as TokenOwner;\n    hash.bhp256 r3 into r4 as field;\n    async remove_role r0 self.caller r4 into r5;\n    output r5 as multi_token_support_programv1.aleo/remove_role.future;\n\nfinalize remove_role:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as field.public;\n    get registered_tokens[r0] into r3;\n    assert.eq r1 r3.admin;\n    remove roles[r2];\n\n\n\n\nfunction mint_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as u32.public;\n    cast self.caller r0 into r4 as TokenOwner;\n    hash.bhp256 r4 into r5 as field;\n    cast r1 r0 into r6 as TokenOwner;\n    hash.bhp256 r6 into r7 as field;\n    async mint_public r0 r1 r2 r3 self.caller r5 r7 into r8;\n    output r8 as multi_token_support_programv1.aleo/mint_public.future;\n\nfinalize mint_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as u32.public;\n    input r4 as address.public;\n    input r5 as field.public;\n    input r6 as field.public;\n    get registered_tokens[r0] into r7;\n    is.eq r4 r7.admin into r8;\n    not r8 into r9;\n    branch.eq r9 false to end_then_0_6;\n    get roles[r5] into r10;\n    is.eq r10 1u8 into r11;\n    is.eq r10 3u8 into r12;\n    or r11 r12 into r13;\n    assert.eq r13 true;\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n    add r7.supply r2 into r14;\n    lte r14 r7.max_supply into r15;\n    assert.eq r15 true;\n    cast r0 r1 0u128 r3 into r16 as Balance;\n    get.or_use balances[r6] r16 into r17;\n    get.or_use authorized_balances[r6] r16 into r18;\n    ternary r7.external_authorization_required r17.token_id r18.token_id into r19;\n    ternary r7.external_authorization_required r17.account r18.account into r20;\n    ternary r7.external_authorization_required r17.balance r18.balance into r21;\n    ternary r7.external_authorization_required r17.authorized_until r18.authorized_until into r22;\n    cast r19 r20 r21 r22 into r23 as Balance;\n    add r23.balance r2 into r24;\n    cast r0 r1 r24 r23.authorized_until into r25 as Balance;\n    branch.eq r7.external_authorization_required false to end_then_0_8;\n    set r25 into balances[r6];\n    branch.eq true true to end_otherwise_0_9;\n    position end_then_0_8;\n    set r25 into authorized_balances[r6];\n    position end_otherwise_0_9;\n    cast r0 r7.name r7.symbol r7.decimals r14 r7.max_supply r7.admin r7.external_authorization_required r7.external_authorization_party into r26 as TokenMetadata;\n    set r26 into registered_tokens[r0];\n\n\n\n\nfunction mint_private:\n    input r0 as field.public;\n    input r1 as address.private;\n    input r2 as u128.public;\n    input r3 as boolean.public;\n    input r4 as u32.public;\n    cast r1 r2 r0 r3 r4 into r5 as Token.record;\n    cast self.caller r0 into r6 as TokenOwner;\n    hash.bhp256 r6 into r7 as field;\n    async mint_private r0 r2 r3 r4 self.caller r7 into r8;\n    output r5 as Token.record;\n    output r8 as multi_token_support_programv1.aleo/mint_private.future;\n\nfinalize mint_private:\n    input r0 as field.public;\n    input r1 as u128.public;\n    input r2 as boolean.public;\n    input r3 as u32.public;\n    input r4 as address.public;\n    input r5 as field.public;\n    get registered_tokens[r0] into r6;\n    is.eq r4 r6.admin into r7;\n    not r7 into r8;\n    branch.eq r8 false to end_then_0_10;\n    get roles[r5] into r9;\n    is.eq r9 1u8 into r10;\n    is.eq r9 3u8 into r11;\n    or r10 r11 into r12;\n    assert.eq r12 true;\n    branch.eq true true to end_otherwise_0_11;\n    position end_then_0_10;\n    position end_otherwise_0_11;\n    add r6.supply r1 into r13;\n    lte r13 r6.max_supply into r14;\n    assert.eq r14 true;\n    assert.eq r6.external_authorization_required r2;\n    is.eq r3 0u32 into r15;\n    not r6.external_authorization_required into r16;\n    or r15 r16 into r17;\n    assert.eq r17 true;\n    cast r0 r6.name r6.symbol r6.decimals r13 r6.max_supply r6.admin r6.external_authorization_required r6.external_authorization_party into r18 as TokenMetadata;\n    set r18 into registered_tokens[r0];\n\n\n\n\nfunction burn_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    cast r1 r0 into r3 as TokenOwner;\n    hash.bhp256 r3 into r4 as field;\n    cast self.caller r0 into r5 as TokenOwner;\n    hash.bhp256 r5 into r6 as field;\n    async burn_public r3 r2 self.caller r6 r4 into r7;\n    output r7 as multi_token_support_programv1.aleo/burn_public.future;\n\nfinalize burn_public:\n    input r0 as TokenOwner.public;\n    input r1 as u128.public;\n    input r2 as address.public;\n    input r3 as field.public;\n    input r4 as field.public;\n    get registered_tokens[r0.token_id] into r5;\n    is.neq r2 r5.admin into r6;\n    branch.eq r6 false to end_then_0_12;\n    get roles[r3] into r7;\n    is.eq r7 2u8 into r8;\n    is.eq r7 3u8 into r9;\n    or r8 r9 into r10;\n    assert.eq r10 true;\n    branch.eq true true to end_otherwise_0_13;\n    position end_then_0_12;\n    position end_otherwise_0_13;\n    sub r5.supply r1 into r11;\n    cast r5.token_id r5.name r5.symbol r5.decimals r11 r5.max_supply r5.admin r5.external_authorization_required r5.external_authorization_party into r12 as TokenMetadata;\n    set r12 into registered_tokens[r0.token_id];\n    cast r0.token_id r0.account 0u128 0u32 into r13 as Balance;\n    get.or_use authorized_balances[r4] r13 into r14;\n    gte r14.balance 0u128 into r15;\n    branch.eq r15 false to end_then_0_14;\n    gt r14.balance r1 into r16;\n    branch.eq r16 false to end_then_1_16;\n    sub r14.balance r1 into r17;\n    cast r0.token_id r0.account r17 r14.authorized_until into r18 as Balance;\n    set r18 into authorized_balances[r4];\n    branch.eq true true to end_otherwise_1_17;\n    position end_then_1_16;\n    cast r0.token_id r0.account 0u128 r14.authorized_until into r19 as Balance;\n    set r19 into authorized_balances[r4];\n    sub r1 r14.balance into r20;\n    is.eq r20 0u128 into r21;\n    branch.eq r21 false to end_then_2_18;\n    branch.eq true true to end_otherwise_2_19;\n    position end_then_2_18;\n    get balances[r4] into r22;\n    sub r22.balance r20 into r23;\n    cast r0.token_id r0.account r23 r22.authorized_until into r24 as Balance;\n    set r24 into balances[r4];\n    position end_otherwise_2_19;\n    position end_otherwise_1_17;\n    branch.eq true true to end_otherwise_0_15;\n    position end_then_0_14;\n    get balances[r4] into r25;\n    sub r25.balance r1 into r26;\n    cast r0.token_id r0.account r26 r25.authorized_until into r27 as Balance;\n    set r27 into balances[r4];\n    position end_otherwise_0_15;\n\n\n\n\nfunction burn_private:\n    input r0 as Token.record;\n    input r1 as u128.public;\n    sub r0.amount r1 into r2;\n    cast r0.owner r2 r0.token_id r0.external_authorization_required r0.authorized_until into r3 as Token.record;\n    cast self.caller r0.token_id into r4 as TokenOwner;\n    hash.bhp256 r4 into r5 as field;\n    async burn_private r0.token_id r1 self.caller r5 into r6;\n    output r3 as Token.record;\n    output r6 as multi_token_support_programv1.aleo/burn_private.future;\n\nfinalize burn_private:\n    input r0 as field.public;\n    input r1 as u128.public;\n    input r2 as address.public;\n    input r3 as field.public;\n    get registered_tokens[r0] into r4;\n    is.eq r2 r4.admin into r5;\n    not r5 into r6;\n    branch.eq r6 false to end_then_0_20;\n    get roles[r3] into r7;\n    is.eq r7 2u8 into r8;\n    is.eq r7 3u8 into r9;\n    or r8 r9 into r10;\n    assert.eq r10 true;\n    branch.eq true true to end_otherwise_0_21;\n    position end_then_0_20;\n    position end_otherwise_0_21;\n    sub r4.supply r1 into r11;\n    cast r0 r4.name r4.symbol r4.decimals r11 r4.max_supply r4.admin r4.external_authorization_required r4.external_authorization_party into r12 as TokenMetadata;\n    set r12 into registered_tokens[r0];\n\n\n\n\nfunction prehook_public:\n    input r0 as TokenOwner.public;\n    input r1 as u128.public;\n    input r2 as u32.public;\n    hash.bhp256 r0 into r3 as field;\n    async prehook_public r0 r1 r2 self.caller r3 into r4;\n    output r4 as multi_token_support_programv1.aleo/prehook_public.future;\n\nfinalize prehook_public:\n    input r0 as TokenOwner.public;\n    input r1 as u128.public;\n    input r2 as u32.public;\n    input r3 as address.public;\n    input r4 as field.public;\n    get registered_tokens[r0.token_id] into r5;\n    assert.eq r5.external_authorization_required true;\n    is.eq r3 r5.external_authorization_party into r6;\n    assert.eq r6 true;\n    cast r0.token_id r0.account 0u128 0u32 into r7 as Balance;\n    get.or_use balances[r4] r7 into r8;\n    get.or_use authorized_balances[r4] r7 into r9;\n    lt r9.authorized_until block.height into r10;\n    add r8.balance r9.balance into r11;\n    ternary r10 r11 r8.balance into r12;\n    ternary r10 0u128 r9.balance into r13;\n    sub r12 r1 into r14;\n    add r13 r1 into r15;\n    cast r0.token_id r0.account r15 r2 into r16 as Balance;\n    set r16 into authorized_balances[r4];\n    cast r0.token_id r0.account r14 r8.authorized_until into r17 as Balance;\n    set r17 into balances[r4];\n\n\n\n\nfunction prehook_private:\n    input r0 as Token.record;\n    input r1 as u128.private;\n    input r2 as u32.private;\n    sub r0.amount r1 into r3;\n    cast r0.owner r3 r0.token_id r0.external_authorization_required r0.authorized_until into r4 as Token.record;\n    cast r0.owner r1 r0.token_id r0.external_authorization_required r2 into r5 as Token.record;\n    async prehook_private r0.token_id self.caller into r6;\n    output r4 as Token.record;\n    output r5 as Token.record;\n    output r6 as multi_token_support_programv1.aleo/prehook_private.future;\n\nfinalize prehook_private:\n    input r0 as field.public;\n    input r1 as address.public;\n    get registered_tokens[r0] into r2;\n    is.eq r1 r2.external_authorization_party into r3;\n    assert.eq r3 true;\n\n\n\n\nfunction approve_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    cast self.caller r1 r0 into r3 as Allowance;\n    hash.bhp256 r3 into r4 as field;\n    async approve_public r2 r4 into r5;\n    output r5 as multi_token_support_programv1.aleo/approve_public.future;\n\nfinalize approve_public:\n    input r0 as u128.public;\n    input r1 as field.public;\n    get.or_use allowances[r1] 0u128 into r2;\n    add r2 r0 into r3;\n    set r3 into allowances[r1];\n\n\n\n\nfunction unapprove_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    cast self.caller r1 r0 into r3 as Allowance;\n    hash.bhp256 r3 into r4 as field;\n    async unapprove_public r2 r4 into r5;\n    output r5 as multi_token_support_programv1.aleo/unapprove_public.future;\n\nfinalize unapprove_public:\n    input r0 as u128.public;\n    input r1 as field.public;\n    get allowances[r1] into r2;\n    sub r2 r0 into r3;\n    set r3 into allowances[r1];\n\n\n\n\nfunction transfer_from_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as u128.public;\n    cast r1 self.caller r0 into r4 as Allowance;\n    hash.bhp256 r4 into r5 as field;\n    cast r1 r0 into r6 as TokenOwner;\n    hash.bhp256 r6 into r7 as field;\n    cast r2 r0 into r8 as TokenOwner;\n    hash.bhp256 r8 into r9 as field;\n    async transfer_from_public r0 r1 r2 r3 r5 r7 r9 into r10;\n    output r10 as multi_token_support_programv1.aleo/transfer_from_public.future;\n\nfinalize transfer_from_public:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as u128.public;\n    input r4 as field.public;\n    input r5 as field.public;\n    input r6 as field.public;\n    get allowances[r4] into r7;\n    sub r7 r3 into r8;\n    set r8 into allowances[r4];\n    get authorized_balances[r5] into r9;\n    get registered_tokens[r0] into r10;\n    lte block.height r9.authorized_until into r11;\n    not r10.external_authorization_required into r12;\n    or r11 r12 into r13;\n    assert.eq r13 true;\n    sub r9.balance r3 into r14;\n    cast r0 r1 r14 r9.authorized_until into r15 as Balance;\n    set r15 into authorized_balances[r5];\n    get registered_tokens[r0] into r16;\n    ternary r16.external_authorization_required 0u32 4294967295u32 into r17;\n    cast r0 r2 0u128 r17 into r18 as Balance;\n    get.or_use balances[r6] r18 into r19;\n    get.or_use authorized_balances[r6] r18 into r20;\n    ternary r16.external_authorization_required r19.token_id r20.token_id into r21;\n    ternary r16.external_authorization_required r19.account r20.account into r22;\n    ternary r16.external_authorization_required r19.balance r20.balance into r23;\n    ternary r16.external_authorization_required r19.authorized_until r20.authorized_until into r24;\n    cast r21 r22 r23 r24 into r25 as Balance;\n    add r25.balance r3 into r26;\n    cast r0 r2 r26 r25.authorized_until into r27 as Balance;\n    branch.eq r16.external_authorization_required false to end_then_0_22;\n    set r27 into balances[r6];\n    branch.eq true true to end_otherwise_0_23;\n    position end_then_0_22;\n    set r27 into authorized_balances[r6];\n    position end_otherwise_0_23;\n\n\n\n\nfunction transfer_from_public_to_private:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as address.private;\n    input r3 as u128.public;\n    input r4 as boolean.public;\n    ternary r4 0u32 4294967295u32 into r5;\n    cast r2 r3 r0 r4 r5 into r6 as Token.record;\n    cast r1 self.caller r0 into r7 as Allowance;\n    hash.bhp256 r7 into r8 as field;\n    cast r1 r0 into r9 as TokenOwner;\n    hash.bhp256 r9 into r10 as field;\n    async transfer_from_public_to_private r0 r1 r3 r4 r8 r10 into r11;\n    output r6 as Token.record;\n    output r11 as multi_token_support_programv1.aleo/transfer_from_public_to_private.future;\n\nfinalize transfer_from_public_to_private:\n    input r0 as field.public;\n    input r1 as address.public;\n    input r2 as u128.public;\n    input r3 as boolean.public;\n    input r4 as field.public;\n    input r5 as field.public;\n    get registered_tokens[r0] into r6;\n    assert.eq r6.external_authorization_required r3;\n    get allowances[r4] into r7;\n    sub r7 r2 into r8;\n    set r8 into allowances[r4];\n    get authorized_balances[r5] into r9;\n    get registered_tokens[r0] into r10;\n    lte block.height r9.authorized_until into r11;\n    not r10.external_authorization_required into r12;\n    or r11 r12 into r13;\n    assert.eq r13 true;\n    sub r9.balance r2 into r14;\n    cast r0 r1 r14 r9.authorized_until into r15 as Balance;\n    set r15 into authorized_balances[r5];\n\n",
  "mtsp_creditsv1.aleo": "import credits.aleo;\nimport multi_token_support_programv1.aleo;\nprogram mtsp_creditsv1.aleo;\n\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\n\n\n\nfunction deposit_credits_public_signer:\n    input r0 as u64.public;\n    call credits.aleo/transfer_public_as_signer mtsp_creditsv1.aleo r0 into r1;\n    cast r0 into r2 as u128;\n    call multi_token_support_programv1.aleo/mint_public 3443843282313283355522573239085696902919850365217539366784739393210722344986field self.signer r2 4294967295u32 into r3;\n    async deposit_credits_public_signer r1 r3 into r4;\n    output r4 as mtsp_creditsv1.aleo/deposit_credits_public_signer.future;\n\nfinalize deposit_credits_public_signer:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as multi_token_support_programv1.aleo/mint_public.future;\n    await r0;\n    await r1;\n\n\n\n\nfunction deposit_credits_private:\n    input r0 as credits.aleo/credits.record;\n    input r1 as u64.private;\n    call credits.aleo/transfer_private_to_public r0 mtsp_creditsv1.aleo r1 into r2 r3;\n    cast r1 into r4 as u128;\n    call multi_token_support_programv1.aleo/mint_private 3443843282313283355522573239085696902919850365217539366784739393210722344986field mtsp_creditsv1.aleo r4 false 4294967295u32 into r5 r6;\n    async deposit_credits_private r3 r6 into r7;\n    output r2 as credits.aleo/credits.record;\n    output r5 as multi_token_support_programv1.aleo/Token.record;\n    output r7 as mtsp_creditsv1.aleo/deposit_credits_private.future;\n\nfinalize deposit_credits_private:\n    input r0 as credits.aleo/transfer_private_to_public.future;\n    input r1 as multi_token_support_programv1.aleo/mint_private.future;\n    await r0;\n    await r1;\n\n\n\n\nfunction withdraw_credits_public:\n    input r0 as u64.private;\n    call credits.aleo/transfer_public self.caller r0 into r1;\n    cast r0 into r2 as u128;\n    call multi_token_support_programv1.aleo/burn_public 3443843282313283355522573239085696902919850365217539366784739393210722344986field self.caller r2 into r3;\n    async withdraw_credits_public r1 r3 into r4;\n    output r4 as mtsp_creditsv1.aleo/withdraw_credits_public.future;\n\nfinalize withdraw_credits_public:\n    input r0 as credits.aleo/transfer_public.future;\n    input r1 as multi_token_support_programv1.aleo/burn_public.future;\n    await r0;\n    await r1;\n\n\n\n\nfunction withdraw_credits_public_signer:\n    input r0 as u64.private;\n    call credits.aleo/transfer_public self.signer r0 into r1;\n    cast r0 into r2 as u128;\n    call multi_token_support_programv1.aleo/burn_public 3443843282313283355522573239085696902919850365217539366784739393210722344986field self.signer r2 into r3;\n    async withdraw_credits_public_signer r1 r3 into r4;\n    output r4 as mtsp_creditsv1.aleo/withdraw_credits_public_signer.future;\n\nfinalize withdraw_credits_public_signer:\n    input r0 as credits.aleo/transfer_public.future;\n    input r1 as multi_token_support_programv1.aleo/burn_public.future;\n    await r0;\n    await r1;\n\n\n\n\nfunction withdraw_credits_private:\n    input r0 as multi_token_support_programv1.aleo/Token.record;\n    input r1 as u64.private;\n    call credits.aleo/transfer_public_to_private r0.owner r1 into r2 r3;\n    cast r1 into r4 as u128;\n    call multi_token_support_programv1.aleo/burn_private r0 r4 into r5 r6;\n    async withdraw_credits_private r3 r6 into r7;\n    output r5 as multi_token_support_programv1.aleo/Token.record;\n    output r2 as credits.aleo/credits.record;\n    output r7 as mtsp_creditsv1.aleo/withdraw_credits_private.future;\n\nfinalize withdraw_credits_private:\n    input r0 as credits.aleo/transfer_public_to_private.future;\n    input r1 as multi_token_support_programv1.aleo/burn_private.future;\n    await r0;\n    await r1;\n\n",
  "pondo_core_protocolv1.aleo": "import credits.aleo;\nimport multi_token_support_programv1.aleo;\nimport mtsp_creditsv1.aleo;\nimport pondo_oraclev1.aleo;\nimport pondo_staked_aleo_tokenv1.aleo;\nimport pondo_tokenv1.aleo;\nimport pondo_delegator1v1.aleo;\nimport pondo_delegator2v1.aleo;\nimport pondo_delegator3v1.aleo;\nimport pondo_delegator4v1.aleo;\nimport pondo_delegator5v1.aleo;\nprogram pondo_core_protocolv1.aleo;\n\nstruct bond_state:\n    validator as address;\n    microcredits as u64;\n\nstruct unbond_state:\n    microcredits as u64;\n    height as u32;\n\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\n\nstruct validator_datum:\n    delegator as address;\n    validator as address;\n    block_height as u32;\n    bonded_microcredits as u64;\n    microcredits_yield_per_epoch as u128;\n    commission as u8;\n    boost as u128;\n\nstruct admin_operation:\n    arg as field;\n    op_type as u8;\n    request_id as u64;\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\nstruct withdrawal_state:\n    microcredits as u64;\n    claim_block as u32;\n\n\nmapping validator_set:\n\tkey as u8.public;\n\tvalue as [validator_state; 5u32].public;\n\n\nmapping protocol_state:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping balances:\n\tkey as u8.public;\n\tvalue as u64.public;\n\n\nmapping owed_commission:\n\tkey as u8.public;\n\tvalue as u64.public;\n\n\nmapping last_rebalance_epoch:\n\tkey as u8.public;\n\tvalue as u32.public;\n\n\nmapping withdrawals:\n\tkey as address.public;\n\tvalue as withdrawal_state.public;\n\n\nfunction initialize:\n    input r0 as u64.private;\n    gte r0 100_000_000u64 into r1;\n    assert.eq r1 true;\n    call credits.aleo/transfer_public_as_signer pondo_core_protocolv1.aleo r0 into r2;\n    call pondo_staked_aleo_tokenv1.aleo/register_token into r3;\n    cast r0 into r4 as u128;\n    call multi_token_support_programv1.aleo/mint_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field pondo_core_protocolv1.aleo r4 4294967295u32 into r5;\n    call pondo_tokenv1.aleo/initialize_token into r6;\n    call pondo_delegator1v1.aleo/initialize into r7;\n    call pondo_delegator2v1.aleo/initialize into r8;\n    call pondo_delegator3v1.aleo/initialize into r9;\n    call pondo_delegator4v1.aleo/initialize into r10;\n    call pondo_delegator5v1.aleo/initialize into r11;\n    async initialize r2 r3 r5 r6 r7 r8 r9 r10 r11 r0 into r12;\n    output r12 as pondo_core_protocolv1.aleo/initialize.future;\n\nfinalize initialize:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as pondo_staked_aleo_tokenv1.aleo/register_token.future;\n    input r2 as multi_token_support_programv1.aleo/mint_public.future;\n    input r3 as pondo_tokenv1.aleo/initialize_token.future;\n    input r4 as pondo_delegator1v1.aleo/initialize.future;\n    input r5 as pondo_delegator2v1.aleo/initialize.future;\n    input r6 as pondo_delegator3v1.aleo/initialize.future;\n    input r7 as pondo_delegator4v1.aleo/initialize.future;\n    input r8 as pondo_delegator5v1.aleo/initialize.future;\n    input r9 as u64.public;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    await r5;\n    await r6;\n    await r7;\n    await r8;\n    contains protocol_state[0u8] into r10;\n    assert.eq r10 false;\n    set r9 into balances[0u8];\n    set 0u64 into balances[1u8];\n    set 0u64 into balances[2u8];\n    set 0u64 into owed_commission[0u8];\n    set 2u8 into protocol_state[0u8];\n    cast  aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r11 as [address; 10u32];\n    get.or_use pondo_oraclev1.aleo/top_validators[0u8] r11 into r12;\n    cast aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 0u32 0u64 0u128 40u8 0u128 into r13 as validator_datum;\n    get.or_use pondo_oraclev1.aleo/validator_data[r12[0u32]] r13 into r14;\n    get.or_use pondo_oraclev1.aleo/validator_data[r12[1u32]] r13 into r15;\n    get.or_use pondo_oraclev1.aleo/validator_data[r12[2u32]] r13 into r16;\n    get.or_use pondo_oraclev1.aleo/validator_data[r12[3u32]] r13 into r17;\n    get.or_use pondo_oraclev1.aleo/validator_data[r12[4u32]] r13 into r18;\n    cast r14.validator r14.commission into r19 as validator_state;\n    cast r15.validator r15.commission into r20 as validator_state;\n    cast r16.validator r16.commission into r21 as validator_state;\n    cast r17.validator r17.commission into r22 as validator_state;\n    cast r18.validator r18.commission into r23 as validator_state;\n    cast  r19 r20 r21 r22 r23 into r24 as [validator_state; 5u32];\n    set r24 into validator_set[1u8];\n    div block.height 120_960u32 into r25;\n    set r25 into last_rebalance_epoch[0u8];\n\n\n\n\nfunction prep_rebalance:\n    call pondo_delegator1v1.aleo/prep_rebalance into r0;\n    call pondo_delegator2v1.aleo/prep_rebalance into r1;\n    call pondo_delegator3v1.aleo/prep_rebalance into r2;\n    call pondo_delegator4v1.aleo/prep_rebalance into r3;\n    call pondo_delegator5v1.aleo/prep_rebalance into r4;\n    async prep_rebalance r0 r1 r2 r3 r4 into r5;\n    output r5 as pondo_core_protocolv1.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    input r0 as pondo_delegator1v1.aleo/prep_rebalance.future;\n    input r1 as pondo_delegator2v1.aleo/prep_rebalance.future;\n    input r2 as pondo_delegator3v1.aleo/prep_rebalance.future;\n    input r3 as pondo_delegator4v1.aleo/prep_rebalance.future;\n    input r4 as pondo_delegator5v1.aleo/prep_rebalance.future;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    div block.height 120_960u32 into r5;\n    get last_rebalance_epoch[0u8] into r6;\n    gt r5 r6 into r7;\n    assert.eq r7 true;\n    set r5 into last_rebalance_epoch[0u8];\n    get protocol_state[0u8] into r8;\n    is.eq r8 0u8 into r9;\n    assert.eq r9 true;\n    set 1u8 into protocol_state[0u8];\n    rem block.height 120_960u32 into r10;\n    lt r10 17_280u32 into r11;\n    is.eq r6 4294967295u32 into r12;\n    or r11 r12 into r13;\n    assert.eq r13 true;\n    cast  aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 into r14 as [address; 10u32];\n    get.or_use pondo_oraclev1.aleo/top_validators[0u8] r14 into r15;\n    cast aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 aleo1qgqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqanmpl0 0u32 0u64 0u128 40u8 0u128 into r16 as validator_datum;\n    get.or_use pondo_oraclev1.aleo/validator_data[r15[0u32]] r16 into r17;\n    get.or_use pondo_oraclev1.aleo/validator_data[r15[1u32]] r16 into r18;\n    get.or_use pondo_oraclev1.aleo/validator_data[r15[2u32]] r16 into r19;\n    get.or_use pondo_oraclev1.aleo/validator_data[r15[3u32]] r16 into r20;\n    get.or_use pondo_oraclev1.aleo/validator_data[r15[4u32]] r16 into r21;\n    cast r17.validator r17.commission into r22 as validator_state;\n    cast r18.validator r18.commission into r23 as validator_state;\n    cast r19.validator r19.commission into r24 as validator_state;\n    cast r20.validator r20.commission into r25 as validator_state;\n    cast r21.validator r21.commission into r26 as validator_state;\n    cast  r22 r23 r24 r25 r26 into r27 as [validator_state; 5u32];\n    set r27 into validator_set[1u8];\n\n\n\n\n\n\n\n\nfunction deposit_public_as_signer:\n    input r0 as u64.public;\n    input r1 as u64.public;\n    input r2 as address.public;\n    gte r1 1u64 into r3;\n    assert.eq r3 true;\n    call credits.aleo/transfer_public_as_signer pondo_core_protocolv1.aleo r0 into r4;\n    cast r1 into r5 as u128;\n    call multi_token_support_programv1.aleo/mint_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field self.signer r5 4294967295u32 into r6;\n    async deposit_public_as_signer r4 r6 r0 r1 into r7;\n    output r7 as pondo_core_protocolv1.aleo/deposit_public_as_signer.future;\n\nfinalize deposit_public_as_signer:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as multi_token_support_programv1.aleo/mint_public.future;\n    input r2 as u64.public;\n    input r3 as u64.public;\n    await r0;\n    await r1;\n    get protocol_state[0u8] into r4;\n    is.neq r4 2u8 into r5;\n    assert.eq r5 true;\n    cast pondo_core_protocolv1.aleo 0u64 into r6 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1v1.aleo] r6 into r7;\n    get.or_use credits.aleo/bonded[pondo_delegator2v1.aleo] r6 into r8;\n    get.or_use credits.aleo/bonded[pondo_delegator3v1.aleo] r6 into r9;\n    get.or_use credits.aleo/bonded[pondo_delegator4v1.aleo] r6 into r10;\n    get.or_use credits.aleo/bonded[pondo_delegator5v1.aleo] r6 into r11;\n    cast 0u64 0u32 into r12 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1v1.aleo] r12 into r13;\n    get.or_use credits.aleo/unbonding[pondo_delegator2v1.aleo] r12 into r14;\n    get.or_use credits.aleo/unbonding[pondo_delegator3v1.aleo] r12 into r15;\n    get.or_use credits.aleo/unbonding[pondo_delegator4v1.aleo] r12 into r16;\n    get.or_use credits.aleo/unbonding[pondo_delegator5v1.aleo] r12 into r17;\n    get.or_use credits.aleo/account[pondo_delegator1v1.aleo] 0u64 into r18;\n    get.or_use credits.aleo/account[pondo_delegator2v1.aleo] 0u64 into r19;\n    get.or_use credits.aleo/account[pondo_delegator3v1.aleo] 0u64 into r20;\n    get.or_use credits.aleo/account[pondo_delegator4v1.aleo] 0u64 into r21;\n    get.or_use credits.aleo/account[pondo_delegator5v1.aleo] 0u64 into r22;\n    add r7.microcredits r8.microcredits into r23;\n    add r23 r9.microcredits into r24;\n    add r24 r10.microcredits into r25;\n    add r25 r11.microcredits into r26;\n    add r18 r19 into r27;\n    add r27 r20 into r28;\n    add r28 r21 into r29;\n    add r29 r22 into r30;\n    add r13.microcredits r14.microcredits into r31;\n    add r31 r15.microcredits into r32;\n    add r32 r16.microcredits into r33;\n    add r33 r17.microcredits into r34;\n    get balances[1u8] into r35;\n    add r26 r30 into r36;\n    add r36 r34 into r37;\n    sub r37 r35 into r38;\n    get balances[0u8] into r39;\n    gt r39 r38 into r40;\n    ternary r40 r38 r39 into r41;\n    get owed_commission[0u8] into r42;\n    get multi_token_support_programv1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r43;\n    cast r42 into r44 as u128;\n    add r43.supply r44 into r45;\n    cast r3 into r46 as u128;\n    sub r45 r46 into r47;\n    gt r38 r41 into r48;\n    cast r38 into r49 as i64;\n    cast r41 into r50 as i64;\n    sub r49 r50 into r51;\n    ternary r48 r51 0i64 into r52;\n    cast r52 into r53 as u128;\n    mul r53 1000u128 into r54;\n    div r54 10_000u128 into r55;\n    cast r55 into r56 as u64;\n    cast r52 into r57 as u64;\n    sub r57 r56 into r58;\n    add r41 r58 into r59;\n    get.or_use credits.aleo/account[pondo_core_protocolv1.aleo] 0u64 into r60;\n    get balances[2u8] into r61;\n    sub r60 r2 into r62;\n    sub r62 r61 into r63;\n    cast r59 into r64 as u128;\n    cast r63 into r65 as u128;\n    cast r56 into r66 as u128;\n    add r64 r65 into r67;\n    add r67 r66 into r68;\n    mul r47 r68 into r69;\n    div r69 r67 into r70;\n    sub r70 r47 into r71;\n    cast r71 into r72 as u64;\n    add r42 r72 into r73;\n    set r73 into owed_commission[0u8];\n    cast r72 into r74 as u128;\n    add r47 r74 into r75;\n    add r59 r56 into r76;\n    set r76 into balances[0u8];\n    cast r76 into r77 as u128;\n    cast r63 into r78 as u128;\n    cast r2 into r79 as u128;\n    add r77 r78 into r80;\n    add r80 r79 into r81;\n    mul r75 r81 into r82;\n    div r82 r80 into r83;\n    sub r83 r75 into r84;\n    cast r84 into r85 as u64;\n    gte r85 r3 into r86;\n    assert.eq r86 true;\n\n\n\n\nfunction deposit_public:\n    input r0 as u64.public;\n    input r1 as u64.public;\n    input r2 as address.public;\n    gte r1 1u64 into r3;\n    assert.eq r3 true;\n    cast r0 into r4 as u128;\n    call multi_token_support_programv1.aleo/transfer_from_public 3443843282313283355522573239085696902919850365217539366784739393210722344986field self.caller pondo_core_protocolv1.aleo r4 into r5;\n    call mtsp_creditsv1.aleo/withdraw_credits_public r0 into r6;\n    cast r1 into r7 as u128;\n    call multi_token_support_programv1.aleo/mint_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field self.caller r7 4294967295u32 into r8;\n    async deposit_public r5 r6 r8 r0 r1 into r9;\n    output r9 as pondo_core_protocolv1.aleo/deposit_public.future;\n\nfinalize deposit_public:\n    input r0 as multi_token_support_programv1.aleo/transfer_from_public.future;\n    input r1 as mtsp_creditsv1.aleo/withdraw_credits_public.future;\n    input r2 as multi_token_support_programv1.aleo/mint_public.future;\n    input r3 as u64.public;\n    input r4 as u64.public;\n    await r0;\n    await r1;\n    await r2;\n    get protocol_state[0u8] into r5;\n    is.neq r5 2u8 into r6;\n    assert.eq r6 true;\n    cast pondo_core_protocolv1.aleo 0u64 into r7 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1v1.aleo] r7 into r8;\n    get.or_use credits.aleo/bonded[pondo_delegator2v1.aleo] r7 into r9;\n    get.or_use credits.aleo/bonded[pondo_delegator3v1.aleo] r7 into r10;\n    get.or_use credits.aleo/bonded[pondo_delegator4v1.aleo] r7 into r11;\n    get.or_use credits.aleo/bonded[pondo_delegator5v1.aleo] r7 into r12;\n    cast 0u64 0u32 into r13 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1v1.aleo] r13 into r14;\n    get.or_use credits.aleo/unbonding[pondo_delegator2v1.aleo] r13 into r15;\n    get.or_use credits.aleo/unbonding[pondo_delegator3v1.aleo] r13 into r16;\n    get.or_use credits.aleo/unbonding[pondo_delegator4v1.aleo] r13 into r17;\n    get.or_use credits.aleo/unbonding[pondo_delegator5v1.aleo] r13 into r18;\n    get.or_use credits.aleo/account[pondo_delegator1v1.aleo] 0u64 into r19;\n    get.or_use credits.aleo/account[pondo_delegator2v1.aleo] 0u64 into r20;\n    get.or_use credits.aleo/account[pondo_delegator3v1.aleo] 0u64 into r21;\n    get.or_use credits.aleo/account[pondo_delegator4v1.aleo] 0u64 into r22;\n    get.or_use credits.aleo/account[pondo_delegator5v1.aleo] 0u64 into r23;\n    add r8.microcredits r9.microcredits into r24;\n    add r24 r10.microcredits into r25;\n    add r25 r11.microcredits into r26;\n    add r26 r12.microcredits into r27;\n    add r19 r20 into r28;\n    add r28 r21 into r29;\n    add r29 r22 into r30;\n    add r30 r23 into r31;\n    add r14.microcredits r15.microcredits into r32;\n    add r32 r16.microcredits into r33;\n    add r33 r17.microcredits into r34;\n    add r34 r18.microcredits into r35;\n    get balances[1u8] into r36;\n    add r27 r31 into r37;\n    add r37 r35 into r38;\n    sub r38 r36 into r39;\n    get balances[0u8] into r40;\n    gt r40 r39 into r41;\n    ternary r41 r39 r40 into r42;\n    get owed_commission[0u8] into r43;\n    get multi_token_support_programv1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r44;\n    cast r43 into r45 as u128;\n    add r44.supply r45 into r46;\n    cast r4 into r47 as u128;\n    sub r46 r47 into r48;\n    gt r39 r42 into r49;\n    cast r39 into r50 as i64;\n    cast r42 into r51 as i64;\n    sub r50 r51 into r52;\n    ternary r49 r52 0i64 into r53;\n    cast r53 into r54 as u128;\n    mul r54 1000u128 into r55;\n    div r55 10_000u128 into r56;\n    cast r56 into r57 as u64;\n    cast r53 into r58 as u64;\n    sub r58 r57 into r59;\n    add r42 r59 into r60;\n    get.or_use credits.aleo/account[pondo_core_protocolv1.aleo] 0u64 into r61;\n    get balances[2u8] into r62;\n    sub r61 r3 into r63;\n    sub r63 r62 into r64;\n    cast r60 into r65 as u128;\n    cast r64 into r66 as u128;\n    cast r57 into r67 as u128;\n    add r65 r66 into r68;\n    add r68 r67 into r69;\n    mul r48 r69 into r70;\n    div r70 r68 into r71;\n    sub r71 r48 into r72;\n    cast r72 into r73 as u64;\n    add r43 r73 into r74;\n    set r74 into owed_commission[0u8];\n    cast r73 into r75 as u128;\n    add r48 r75 into r76;\n    add r60 r57 into r77;\n    set r77 into balances[0u8];\n    cast r77 into r78 as u128;\n    cast r64 into r79 as u128;\n    cast r3 into r80 as u128;\n    add r78 r79 into r81;\n    add r81 r80 into r82;\n    mul r76 r82 into r83;\n    div r83 r81 into r84;\n    sub r84 r76 into r85;\n    cast r85 into r86 as u64;\n    gte r86 r4 into r87;\n    assert.eq r87 true;\n\n\n\n\n\n\nfunction distribute_deposits:\n    input r0 as [u64; 5u32].public;\n    gte r0[0u32] 1_000_000u64 into r1;\n    assert.eq r1 true;\n    gte r0[1u32] 1_000_000u64 into r2;\n    assert.eq r2 true;\n    gte r0[2u32] 1_000_000u64 into r3;\n    assert.eq r3 true;\n    gte r0[3u32] 1_000_000u64 into r4;\n    assert.eq r4 true;\n    gte r0[4u32] 1_000_000u64 into r5;\n    assert.eq r5 true;\n    call credits.aleo/transfer_public pondo_delegator1v1.aleo r0[0u32] into r6;\n    call credits.aleo/transfer_public pondo_delegator2v1.aleo r0[1u32] into r7;\n    call credits.aleo/transfer_public pondo_delegator3v1.aleo r0[2u32] into r8;\n    call credits.aleo/transfer_public pondo_delegator4v1.aleo r0[3u32] into r9;\n    call credits.aleo/transfer_public pondo_delegator5v1.aleo r0[4u32] into r10;\n    async distribute_deposits r6 r7 r8 r9 r10 r0 into r11;\n    output r11 as pondo_core_protocolv1.aleo/distribute_deposits.future;\n\nfinalize distribute_deposits:\n    input r0 as credits.aleo/transfer_public.future;\n    input r1 as credits.aleo/transfer_public.future;\n    input r2 as credits.aleo/transfer_public.future;\n    input r3 as credits.aleo/transfer_public.future;\n    input r4 as credits.aleo/transfer_public.future;\n    input r5 as [u64; 5u32].public;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    get protocol_state[0u8] into r6;\n    is.eq r6 0u8 into r7;\n    assert.eq r7 true;\n    get balances[0u8] into r8;\n    get.or_use credits.aleo/account[pondo_core_protocolv1.aleo] 0u64 into r9;\n    get balances[2u8] into r10;\n    sub r9 r10 into r11;\n    cast r8 into r12 as u128;\n    mul r12 250u128 into r13;\n    div r13 10_000u128 into r14;\n    cast 250_000_000_000u64 into r15 as u128;\n    gt r14 r15 into r16;\n    cast r14 into r17 as u64;\n    ternary r16 250_000_000_000u64 r17 into r18;\n    gte r11 r18 into r19;\n    assert.eq r19 true;\n    cast  3700u128 2600u128 1600u128 1200u128 900u128 900u128 900u128 900u128 900u128 900u128 into r20 as [u128; 10u32];\n    get.or_use pondo_oraclev1.aleo/delegator_allocation[0u8] r20 into r21;\n    add r5[0u32] r5[1u32] into r22;\n    add r22 r5[2u32] into r23;\n    add r23 r5[3u32] into r24;\n    add r24 r5[4u32] into r25;\n    cast r25 into r26 as u128;\n    cast r5[0u32] into r27 as u128;\n    mul r27 10_000u128 into r28;\n    div r28 r26 into r29;\n    cast r5[1u32] into r30 as u128;\n    mul r30 10_000u128 into r31;\n    div r31 r26 into r32;\n    cast r5[2u32] into r33 as u128;\n    mul r33 10_000u128 into r34;\n    div r34 r26 into r35;\n    cast r5[3u32] into r36 as u128;\n    mul r36 10_000u128 into r37;\n    div r37 r26 into r38;\n    cast r5[4u32] into r39 as u128;\n    mul r39 10_000u128 into r40;\n    div r40 r26 into r41;\n    sub r21[0u32] r29 into r42;\n    lte r42 2u128 into r43;\n    assert.eq r43 true;\n    sub r21[1u32] r32 into r44;\n    lte r44 2u128 into r45;\n    assert.eq r45 true;\n    sub r21[2u32] r35 into r46;\n    lte r46 2u128 into r47;\n    assert.eq r47 true;\n    sub r21[3u32] r38 into r48;\n    lte r48 2u128 into r49;\n    assert.eq r49 true;\n    sub r21[4u32] r41 into r50;\n    lte r50 2u128 into r51;\n    assert.eq r51 true;\n    add r8 r25 into r52;\n    set r52 into balances[0u8];\n\n\n\n\n\n\nfunction instant_withdraw_public:\n    input r0 as u64.public;\n    input r1 as u64.public;\n    cast r0 into r2 as u128;\n    call multi_token_support_programv1.aleo/burn_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field self.caller r2 into r3;\n    call credits.aleo/transfer_public self.caller r1 into r4;\n    async instant_withdraw_public r3 r4 r0 r1 self.caller into r5;\n    output r5 as pondo_core_protocolv1.aleo/instant_withdraw_public.future;\n\nfinalize instant_withdraw_public:\n    input r0 as multi_token_support_programv1.aleo/burn_public.future;\n    input r1 as credits.aleo/transfer_public.future;\n    input r2 as u64.public;\n    input r3 as u64.public;\n    input r4 as address.public;\n    await r0;\n    await r1;\n    get protocol_state[0u8] into r5;\n    is.neq r5 2u8 into r6;\n    assert.eq r6 true;\n    contains withdrawals[r4] into r7;\n    not r7 into r8;\n    assert.eq r8 true;\n    cast pondo_core_protocolv1.aleo 0u64 into r9 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1v1.aleo] r9 into r10;\n    get.or_use credits.aleo/bonded[pondo_delegator2v1.aleo] r9 into r11;\n    get.or_use credits.aleo/bonded[pondo_delegator3v1.aleo] r9 into r12;\n    get.or_use credits.aleo/bonded[pondo_delegator4v1.aleo] r9 into r13;\n    get.or_use credits.aleo/bonded[pondo_delegator5v1.aleo] r9 into r14;\n    cast 0u64 0u32 into r15 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1v1.aleo] r15 into r16;\n    get.or_use credits.aleo/unbonding[pondo_delegator2v1.aleo] r15 into r17;\n    get.or_use credits.aleo/unbonding[pondo_delegator3v1.aleo] r15 into r18;\n    get.or_use credits.aleo/unbonding[pondo_delegator4v1.aleo] r15 into r19;\n    get.or_use credits.aleo/unbonding[pondo_delegator5v1.aleo] r15 into r20;\n    get.or_use credits.aleo/account[pondo_delegator1v1.aleo] 0u64 into r21;\n    get.or_use credits.aleo/account[pondo_delegator2v1.aleo] 0u64 into r22;\n    get.or_use credits.aleo/account[pondo_delegator3v1.aleo] 0u64 into r23;\n    get.or_use credits.aleo/account[pondo_delegator4v1.aleo] 0u64 into r24;\n    get.or_use credits.aleo/account[pondo_delegator5v1.aleo] 0u64 into r25;\n    add r10.microcredits r11.microcredits into r26;\n    add r26 r12.microcredits into r27;\n    add r27 r13.microcredits into r28;\n    add r28 r14.microcredits into r29;\n    add r21 r22 into r30;\n    add r30 r23 into r31;\n    add r31 r24 into r32;\n    add r32 r25 into r33;\n    add r16.microcredits r17.microcredits into r34;\n    add r34 r18.microcredits into r35;\n    add r35 r19.microcredits into r36;\n    add r36 r20.microcredits into r37;\n    get balances[1u8] into r38;\n    add r29 r33 into r39;\n    add r39 r37 into r40;\n    sub r40 r38 into r41;\n    get balances[0u8] into r42;\n    gt r42 r41 into r43;\n    ternary r43 r41 r42 into r44;\n    get owed_commission[0u8] into r45;\n    get multi_token_support_programv1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r46;\n    cast r45 into r47 as u128;\n    add r46.supply r47 into r48;\n    cast r2 into r49 as u128;\n    add r48 r49 into r50;\n    gt r41 r44 into r51;\n    cast r41 into r52 as i64;\n    cast r44 into r53 as i64;\n    sub r52 r53 into r54;\n    ternary r51 r54 0i64 into r55;\n    cast r55 into r56 as u128;\n    mul r56 1000u128 into r57;\n    div r57 10_000u128 into r58;\n    cast r58 into r59 as u64;\n    cast r55 into r60 as u64;\n    sub r60 r59 into r61;\n    add r44 r61 into r62;\n    get.or_use credits.aleo/account[pondo_core_protocolv1.aleo] 0u64 into r63;\n    get balances[2u8] into r64;\n    gte r63 r64 into r65;\n    assert.eq r65 true;\n    sub r63 r64 into r66;\n    add r66 r3 into r67;\n    cast r62 into r68 as u128;\n    cast r67 into r69 as u128;\n    cast r59 into r70 as u128;\n    add r68 r69 into r71;\n    add r71 r70 into r72;\n    mul r50 r72 into r73;\n    div r73 r71 into r74;\n    sub r74 r50 into r75;\n    cast r75 into r76 as u64;\n    add r45 r76 into r77;\n    cast r76 into r78 as u128;\n    add r50 r78 into r79;\n    add r62 r59 into r80;\n    set r80 into balances[0u8];\n    cast r80 into r81 as u128;\n    cast r67 into r82 as u128;\n    add r81 r82 into r83;\n    cast r2 into r84 as u128;\n    mul r84 025u128 into r85;\n    div r85 10_000u128 into r86;\n    cast r86 into r87 as u64;\n    sub r2 r87 into r88;\n    cast r88 into r89 as u128;\n    cast r83 into r90 as u128;\n    mul r89 r90 into r91;\n    cast r79 into r92 as u128;\n    div r91 r92 into r93;\n    cast r93 into r94 as u64;\n    lte r3 r94 into r95;\n    assert.eq r95 true;\n    add r77 r87 into r96;\n    set r96 into owed_commission[0u8];\n\n\n\n\nfunction instant_withdraw_public_signer:\n    input r0 as u64.public;\n    input r1 as u64.public;\n    cast r0 into r2 as u128;\n    call multi_token_support_programv1.aleo/burn_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field self.signer r2 into r3;\n    call credits.aleo/transfer_public self.signer r1 into r4;\n    async instant_withdraw_public_signer r3 r4 r0 r1 self.signer into r5;\n    output r5 as pondo_core_protocolv1.aleo/instant_withdraw_public_signer.future;\n\nfinalize instant_withdraw_public_signer:\n    input r0 as multi_token_support_programv1.aleo/burn_public.future;\n    input r1 as credits.aleo/transfer_public.future;\n    input r2 as u64.public;\n    input r3 as u64.public;\n    input r4 as address.public;\n    await r0;\n    await r1;\n    get protocol_state[0u8] into r5;\n    is.neq r5 2u8 into r6;\n    assert.eq r6 true;\n    contains withdrawals[r4] into r7;\n    not r7 into r8;\n    assert.eq r8 true;\n    cast pondo_core_protocolv1.aleo 0u64 into r9 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1v1.aleo] r9 into r10;\n    get.or_use credits.aleo/bonded[pondo_delegator2v1.aleo] r9 into r11;\n    get.or_use credits.aleo/bonded[pondo_delegator3v1.aleo] r9 into r12;\n    get.or_use credits.aleo/bonded[pondo_delegator4v1.aleo] r9 into r13;\n    get.or_use credits.aleo/bonded[pondo_delegator5v1.aleo] r9 into r14;\n    cast 0u64 0u32 into r15 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1v1.aleo] r15 into r16;\n    get.or_use credits.aleo/unbonding[pondo_delegator2v1.aleo] r15 into r17;\n    get.or_use credits.aleo/unbonding[pondo_delegator3v1.aleo] r15 into r18;\n    get.or_use credits.aleo/unbonding[pondo_delegator4v1.aleo] r15 into r19;\n    get.or_use credits.aleo/unbonding[pondo_delegator5v1.aleo] r15 into r20;\n    get.or_use credits.aleo/account[pondo_delegator1v1.aleo] 0u64 into r21;\n    get.or_use credits.aleo/account[pondo_delegator2v1.aleo] 0u64 into r22;\n    get.or_use credits.aleo/account[pondo_delegator3v1.aleo] 0u64 into r23;\n    get.or_use credits.aleo/account[pondo_delegator4v1.aleo] 0u64 into r24;\n    get.or_use credits.aleo/account[pondo_delegator5v1.aleo] 0u64 into r25;\n    add r10.microcredits r11.microcredits into r26;\n    add r26 r12.microcredits into r27;\n    add r27 r13.microcredits into r28;\n    add r28 r14.microcredits into r29;\n    add r21 r22 into r30;\n    add r30 r23 into r31;\n    add r31 r24 into r32;\n    add r32 r25 into r33;\n    add r16.microcredits r17.microcredits into r34;\n    add r34 r18.microcredits into r35;\n    add r35 r19.microcredits into r36;\n    add r36 r20.microcredits into r37;\n    get balances[1u8] into r38;\n    add r29 r33 into r39;\n    add r39 r37 into r40;\n    sub r40 r38 into r41;\n    get balances[0u8] into r42;\n    gt r42 r41 into r43;\n    ternary r43 r41 r42 into r44;\n    get owed_commission[0u8] into r45;\n    get multi_token_support_programv1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r46;\n    cast r45 into r47 as u128;\n    add r46.supply r47 into r48;\n    cast r2 into r49 as u128;\n    add r48 r49 into r50;\n    gt r41 r44 into r51;\n    cast r41 into r52 as i64;\n    cast r44 into r53 as i64;\n    sub r52 r53 into r54;\n    ternary r51 r54 0i64 into r55;\n    cast r55 into r56 as u128;\n    mul r56 1000u128 into r57;\n    div r57 10_000u128 into r58;\n    cast r58 into r59 as u64;\n    cast r55 into r60 as u64;\n    sub r60 r59 into r61;\n    add r44 r61 into r62;\n    get.or_use credits.aleo/account[pondo_core_protocolv1.aleo] 0u64 into r63;\n    get balances[2u8] into r64;\n    gte r63 r64 into r65;\n    assert.eq r65 true;\n    sub r63 r64 into r66;\n    add r66 r3 into r67;\n    cast r62 into r68 as u128;\n    cast r67 into r69 as u128;\n    cast r59 into r70 as u128;\n    add r68 r69 into r71;\n    add r71 r70 into r72;\n    mul r50 r72 into r73;\n    div r73 r71 into r74;\n    sub r74 r50 into r75;\n    cast r75 into r76 as u64;\n    add r45 r76 into r77;\n    cast r76 into r78 as u128;\n    add r50 r78 into r79;\n    add r62 r59 into r80;\n    set r80 into balances[0u8];\n    cast r80 into r81 as u128;\n    cast r67 into r82 as u128;\n    add r81 r82 into r83;\n    cast r2 into r84 as u128;\n    mul r84 025u128 into r85;\n    div r85 10_000u128 into r86;\n    cast r86 into r87 as u64;\n    sub r2 r87 into r88;\n    cast r88 into r89 as u128;\n    cast r83 into r90 as u128;\n    mul r89 r90 into r91;\n    cast r79 into r92 as u128;\n    div r91 r92 into r93;\n    cast r93 into r94 as u64;\n    lte r3 r94 into r95;\n    assert.eq r95 true;\n    add r77 r87 into r96;\n    set r96 into owed_commission[0u8];\n\n\n\n\n\n\nfunction withdraw_public:\n    input r0 as u64.public;\n    cast r0 into r1 as u128;\n    call multi_token_support_programv1.aleo/burn_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field self.caller r1 into r2;\n    async withdraw_public r2 r0 self.caller into r3;\n    output r3 as pondo_core_protocolv1.aleo/withdraw_public.future;\n\nfinalize withdraw_public:\n    input r0 as multi_token_support_programv1.aleo/burn_public.future;\n    input r1 as u64.public;\n    input r2 as address.public;\n    await r0;\n    get protocol_state[0u8] into r3;\n    is.neq r3 2u8 into r4;\n    assert.eq r4 true;\n    contains withdrawals[r2] into r5;\n    not r5 into r6;\n    assert.eq r6 true;\n    cast pondo_core_protocolv1.aleo 0u64 into r7 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1v1.aleo] r7 into r8;\n    get.or_use credits.aleo/bonded[pondo_delegator2v1.aleo] r7 into r9;\n    get.or_use credits.aleo/bonded[pondo_delegator3v1.aleo] r7 into r10;\n    get.or_use credits.aleo/bonded[pondo_delegator4v1.aleo] r7 into r11;\n    get.or_use credits.aleo/bonded[pondo_delegator5v1.aleo] r7 into r12;\n    cast 0u64 0u32 into r13 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1v1.aleo] r13 into r14;\n    get.or_use credits.aleo/unbonding[pondo_delegator2v1.aleo] r13 into r15;\n    get.or_use credits.aleo/unbonding[pondo_delegator3v1.aleo] r13 into r16;\n    get.or_use credits.aleo/unbonding[pondo_delegator4v1.aleo] r13 into r17;\n    get.or_use credits.aleo/unbonding[pondo_delegator5v1.aleo] r13 into r18;\n    get.or_use credits.aleo/account[pondo_delegator1v1.aleo] 0u64 into r19;\n    get.or_use credits.aleo/account[pondo_delegator2v1.aleo] 0u64 into r20;\n    get.or_use credits.aleo/account[pondo_delegator3v1.aleo] 0u64 into r21;\n    get.or_use credits.aleo/account[pondo_delegator4v1.aleo] 0u64 into r22;\n    get.or_use credits.aleo/account[pondo_delegator5v1.aleo] 0u64 into r23;\n    add r8.microcredits r9.microcredits into r24;\n    add r24 r10.microcredits into r25;\n    add r25 r11.microcredits into r26;\n    add r26 r12.microcredits into r27;\n    add r19 r20 into r28;\n    add r28 r21 into r29;\n    add r29 r22 into r30;\n    add r30 r23 into r31;\n    add r14.microcredits r15.microcredits into r32;\n    add r32 r16.microcredits into r33;\n    add r33 r17.microcredits into r34;\n    add r34 r18.microcredits into r35;\n    get balances[1u8] into r36;\n    add r27 r31 into r37;\n    add r37 r35 into r38;\n    sub r38 r36 into r39;\n    get balances[0u8] into r40;\n    gt r40 r39 into r41;\n    ternary r41 r39 r40 into r42;\n    get owed_commission[0u8] into r43;\n    get multi_token_support_programv1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r44;\n    cast r43 into r45 as u128;\n    add r44.supply r45 into r46;\n    cast r1 into r47 as u128;\n    add r46 r47 into r48;\n    cast r39 into r49 as i64;\n    cast r42 into r50 as i64;\n    gt r49 r50 into r51;\n    cast r39 into r52 as i64;\n    cast r42 into r53 as i64;\n    sub r52 r53 into r54;\n    ternary r51 r54 0i64 into r55;\n    cast r55 into r56 as u128;\n    mul r56 1000u128 into r57;\n    div r57 10_000u128 into r58;\n    cast r58 into r59 as u64;\n    cast r55 into r60 as u64;\n    sub r60 r59 into r61;\n    add r42 r61 into r62;\n    get.or_use credits.aleo/account[pondo_core_protocolv1.aleo] 0u64 into r63;\n    get balances[2u8] into r64;\n    sub r63 r64 into r65;\n    cast r62 into r66 as u128;\n    cast r65 into r67 as u128;\n    cast r59 into r68 as u128;\n    add r66 r67 into r69;\n    add r69 r68 into r70;\n    mul r48 r70 into r71;\n    div r71 r69 into r72;\n    sub r72 r48 into r73;\n    cast r73 into r74 as u64;\n    add r43 r74 into r75;\n    set r75 into owed_commission[0u8];\n    cast r74 into r76 as u128;\n    add r48 r76 into r77;\n    add r62 r59 into r78;\n    cast r78 into r79 as u128;\n    cast r65 into r80 as u128;\n    add r79 r80 into r81;\n    cast r1 into r82 as u128;\n    cast r81 into r83 as u128;\n    mul r82 r83 into r84;\n    cast r77 into r85 as u128;\n    div r84 r85 into r86;\n    cast r86 into r87 as u64;\n    add r36 r87 into r88;\n    set r88 into balances[1u8];\n    sub r78 r87 into r89;\n    set r89 into balances[0u8];\n    add block.height 43_200u32 into r90;\n    div r90 120_960u32 into r91;\n    add r91 1u32 into r92;\n    mul r92 120_960u32 into r93;\n    add r93 17_280u32 into r94;\n    add r94 1u32 into r95;\n    cast r87 r95 into r96 as withdrawal_state;\n    set r96 into withdrawals[r2];\n\n\n\n\nfunction withdraw_public_as_signer:\n    input r0 as u64.public;\n    cast r0 into r1 as u128;\n    call multi_token_support_programv1.aleo/burn_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field self.signer r1 into r2;\n    async withdraw_public_as_signer r2 r0 self.signer into r3;\n    output r3 as pondo_core_protocolv1.aleo/withdraw_public_as_signer.future;\n\nfinalize withdraw_public_as_signer:\n    input r0 as multi_token_support_programv1.aleo/burn_public.future;\n    input r1 as u64.public;\n    input r2 as address.public;\n    await r0;\n    get protocol_state[0u8] into r3;\n    is.neq r3 2u8 into r4;\n    assert.eq r4 true;\n    contains withdrawals[r2] into r5;\n    not r5 into r6;\n    assert.eq r6 true;\n    cast pondo_core_protocolv1.aleo 0u64 into r7 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1v1.aleo] r7 into r8;\n    get.or_use credits.aleo/bonded[pondo_delegator2v1.aleo] r7 into r9;\n    get.or_use credits.aleo/bonded[pondo_delegator3v1.aleo] r7 into r10;\n    get.or_use credits.aleo/bonded[pondo_delegator4v1.aleo] r7 into r11;\n    get.or_use credits.aleo/bonded[pondo_delegator5v1.aleo] r7 into r12;\n    cast 0u64 0u32 into r13 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1v1.aleo] r13 into r14;\n    get.or_use credits.aleo/unbonding[pondo_delegator2v1.aleo] r13 into r15;\n    get.or_use credits.aleo/unbonding[pondo_delegator3v1.aleo] r13 into r16;\n    get.or_use credits.aleo/unbonding[pondo_delegator4v1.aleo] r13 into r17;\n    get.or_use credits.aleo/unbonding[pondo_delegator5v1.aleo] r13 into r18;\n    get.or_use credits.aleo/account[pondo_delegator1v1.aleo] 0u64 into r19;\n    get.or_use credits.aleo/account[pondo_delegator2v1.aleo] 0u64 into r20;\n    get.or_use credits.aleo/account[pondo_delegator3v1.aleo] 0u64 into r21;\n    get.or_use credits.aleo/account[pondo_delegator4v1.aleo] 0u64 into r22;\n    get.or_use credits.aleo/account[pondo_delegator5v1.aleo] 0u64 into r23;\n    add r8.microcredits r9.microcredits into r24;\n    add r24 r10.microcredits into r25;\n    add r25 r11.microcredits into r26;\n    add r26 r12.microcredits into r27;\n    add r19 r20 into r28;\n    add r28 r21 into r29;\n    add r29 r22 into r30;\n    add r30 r23 into r31;\n    add r14.microcredits r15.microcredits into r32;\n    add r32 r16.microcredits into r33;\n    add r33 r17.microcredits into r34;\n    add r34 r18.microcredits into r35;\n    get balances[1u8] into r36;\n    add r27 r31 into r37;\n    add r37 r35 into r38;\n    sub r38 r36 into r39;\n    get balances[0u8] into r40;\n    gt r40 r39 into r41;\n    ternary r41 r39 r40 into r42;\n    get owed_commission[0u8] into r43;\n    get multi_token_support_programv1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r44;\n    cast r43 into r45 as u128;\n    add r44.supply r45 into r46;\n    cast r1 into r47 as u128;\n    add r46 r47 into r48;\n    cast r39 into r49 as i64;\n    cast r42 into r50 as i64;\n    gt r49 r50 into r51;\n    cast r39 into r52 as i64;\n    cast r42 into r53 as i64;\n    sub r52 r53 into r54;\n    ternary r51 r54 0i64 into r55;\n    cast r55 into r56 as u128;\n    mul r56 1000u128 into r57;\n    div r57 10_000u128 into r58;\n    cast r58 into r59 as u64;\n    cast r55 into r60 as u64;\n    sub r60 r59 into r61;\n    add r42 r61 into r62;\n    get.or_use credits.aleo/account[pondo_core_protocolv1.aleo] 0u64 into r63;\n    get balances[2u8] into r64;\n    sub r63 r64 into r65;\n    cast r62 into r66 as u128;\n    cast r65 into r67 as u128;\n    cast r59 into r68 as u128;\n    add r66 r67 into r69;\n    add r69 r68 into r70;\n    mul r48 r70 into r71;\n    div r71 r69 into r72;\n    sub r72 r48 into r73;\n    cast r73 into r74 as u64;\n    add r43 r74 into r75;\n    set r75 into owed_commission[0u8];\n    cast r74 into r76 as u128;\n    add r48 r76 into r77;\n    add r62 r59 into r78;\n    cast r78 into r79 as u128;\n    cast r65 into r80 as u128;\n    add r79 r80 into r81;\n    cast r1 into r82 as u128;\n    cast r81 into r83 as u128;\n    mul r82 r83 into r84;\n    cast r77 into r85 as u128;\n    div r84 r85 into r86;\n    cast r86 into r87 as u64;\n    add r36 r87 into r88;\n    set r88 into balances[1u8];\n    sub r78 r87 into r89;\n    set r89 into balances[0u8];\n    add block.height 43_200u32 into r90;\n    div r90 120_960u32 into r91;\n    add r91 1u32 into r92;\n    mul r92 120_960u32 into r93;\n    add r93 17_280u32 into r94;\n    add r94 1u32 into r95;\n    cast r87 r95 into r96 as withdrawal_state;\n    set r96 into withdrawals[r2];\n\n\n\n\nfunction claim_withdrawal_public:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/transfer_public r0 r1 into r2;\n    async claim_withdrawal_public r2 r0 r1 into r3;\n    output r3 as pondo_core_protocolv1.aleo/claim_withdrawal_public.future;\n\nfinalize claim_withdrawal_public:\n    input r0 as credits.aleo/transfer_public.future;\n    input r1 as address.public;\n    input r2 as u64.public;\n    await r0;\n    get protocol_state[0u8] into r3;\n    is.neq r3 2u8 into r4;\n    assert.eq r4 true;\n    get withdrawals[r1] into r5;\n    lt r5.claim_block block.height into r6;\n    assert.eq r6 true;\n    is.eq r5.microcredits r2 into r7;\n    branch.eq r7 false to end_then_0_0;\n    remove withdrawals[r1];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    sub r5.microcredits r2 into r8;\n    cast r8 r5.claim_block into r9 as withdrawal_state;\n    set r9 into withdrawals[r1];\n    position end_otherwise_0_1;\n    get balances[2u8] into r10;\n    sub r10 r2 into r11;\n    set r11 into balances[2u8];\n\n\n\n\nfunction rebalance_retrieve_credits:\n    input r0 as [u64; 5u32].public;\n    input r1 as u64.public;\n    gte r1 0u64 into r2;\n    assert.eq r2 true;\n    call pondo_delegator1v1.aleo/transfer_to_core_protocol r0[0u32] into r3;\n    call pondo_delegator2v1.aleo/transfer_to_core_protocol r0[1u32] into r4;\n    call pondo_delegator3v1.aleo/transfer_to_core_protocol r0[2u32] into r5;\n    call pondo_delegator4v1.aleo/transfer_to_core_protocol r0[3u32] into r6;\n    call pondo_delegator5v1.aleo/transfer_to_core_protocol r0[4u32] into r7;\n    cast r1 into r8 as u128;\n    call multi_token_support_programv1.aleo/mint_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field pondo_tokenv1.aleo r8 4294967295u32 into r9;\n    async rebalance_retrieve_credits r3 r4 r5 r6 r7 r9 r0 r1 into r10;\n    output r10 as pondo_core_protocolv1.aleo/rebalance_retrieve_credits.future;\n\nfinalize rebalance_retrieve_credits:\n    input r0 as pondo_delegator1v1.aleo/transfer_to_core_protocol.future;\n    input r1 as pondo_delegator2v1.aleo/transfer_to_core_protocol.future;\n    input r2 as pondo_delegator3v1.aleo/transfer_to_core_protocol.future;\n    input r3 as pondo_delegator4v1.aleo/transfer_to_core_protocol.future;\n    input r4 as pondo_delegator5v1.aleo/transfer_to_core_protocol.future;\n    input r5 as multi_token_support_programv1.aleo/mint_public.future;\n    input r6 as [u64; 5u32].public;\n    input r7 as u64.public;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    await r5;\n    get balances[1u8] into r8;\n    add r6[0u32] r6[1u32] into r9;\n    add r9 r6[2u32] into r10;\n    add r10 r6[3u32] into r11;\n    add r11 r6[4u32] into r12;\n    get.or_use credits.aleo/account[pondo_delegator1v1.aleo] 0u64 into r13;\n    get.or_use credits.aleo/account[pondo_delegator2v1.aleo] 0u64 into r14;\n    get.or_use credits.aleo/account[pondo_delegator3v1.aleo] 0u64 into r15;\n    get.or_use credits.aleo/account[pondo_delegator4v1.aleo] 0u64 into r16;\n    get.or_use credits.aleo/account[pondo_delegator5v1.aleo] 0u64 into r17;\n    add r13 r14 into r18;\n    add r18 r15 into r19;\n    add r19 r16 into r20;\n    add r20 r17 into r21;\n    add r12 r21 into r22;\n    sub r22 r8 into r23;\n    get balances[0u8] into r24;\n    gt r24 r23 into r25;\n    ternary r25 r23 r24 into r26;\n    get owed_commission[0u8] into r27;\n    get multi_token_support_programv1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r28;\n    cast r27 into r29 as u128;\n    add r28.supply r29 into r30;\n    cast r7 into r31 as u128;\n    sub r30 r31 into r32;\n    gt r23 r26 into r33;\n    cast r23 into r34 as i64;\n    cast r26 into r35 as i64;\n    sub r34 r35 into r36;\n    ternary r33 r36 0i64 into r37;\n    cast r37 into r38 as u128;\n    mul r38 1000u128 into r39;\n    div r39 10_000u128 into r40;\n    cast r40 into r41 as u64;\n    cast r37 into r42 as u64;\n    sub r42 r41 into r43;\n    add r26 r43 into r44;\n    get.or_use credits.aleo/account[pondo_core_protocolv1.aleo] 0u64 into r45;\n    get balances[2u8] into r46;\n    add r46 r8 into r47;\n    set r47 into balances[2u8];\n    set 0u64 into balances[1u8];\n    sub r45 r12 into r48;\n    sub r48 r46 into r49;\n    cast r44 into r50 as u128;\n    cast r49 into r51 as u128;\n    cast r41 into r52 as u128;\n    add r50 r51 into r53;\n    add r53 r52 into r54;\n    mul r32 r54 into r55;\n    div r55 r53 into r56;\n    sub r56 r32 into r57;\n    cast r57 into r58 as u64;\n    mul r27 98u64 into r59;\n    div r59 100u64 into r60;\n    gte r7 r60 into r61;\n    assert.eq r61 true;\n    add r27 r58 into r62;\n    sub r62 r7 into r63;\n    set r63 into owed_commission[0u8];\n    add r44 r41 into r64;\n    set r64 into balances[0u8];\n    get protocol_state[0u8] into r65;\n    is.eq r65 1u8 into r66;\n    assert.eq r66 true;\n    set 2u8 into protocol_state[0u8];\n\n\n\n\nfunction rebalance_redistribute:\n    input r0 as [validator_state; 5u32].public;\n    input r1 as [u64; 5u32].public;\n    call credits.aleo/transfer_public pondo_delegator1v1.aleo r1[0u32] into r2;\n    call credits.aleo/transfer_public pondo_delegator2v1.aleo r1[1u32] into r3;\n    call credits.aleo/transfer_public pondo_delegator3v1.aleo r1[2u32] into r4;\n    call credits.aleo/transfer_public pondo_delegator4v1.aleo r1[3u32] into r5;\n    call credits.aleo/transfer_public pondo_delegator5v1.aleo r1[4u32] into r6;\n    call pondo_delegator1v1.aleo/set_validator r0[0u32].validator r0[0u32].commission into r7;\n    call pondo_delegator2v1.aleo/set_validator r0[1u32].validator r0[1u32].commission into r8;\n    call pondo_delegator3v1.aleo/set_validator r0[2u32].validator r0[2u32].commission into r9;\n    call pondo_delegator4v1.aleo/set_validator r0[3u32].validator r0[3u32].commission into r10;\n    call pondo_delegator5v1.aleo/set_validator r0[4u32].validator r0[4u32].commission into r11;\n    async rebalance_redistribute r2 r3 r4 r5 r6 r7 r8 r9 r10 r11 r0 r1 into r12;\n    output r12 as pondo_core_protocolv1.aleo/rebalance_redistribute.future;\n\nfinalize rebalance_redistribute:\n    input r0 as credits.aleo/transfer_public.future;\n    input r1 as credits.aleo/transfer_public.future;\n    input r2 as credits.aleo/transfer_public.future;\n    input r3 as credits.aleo/transfer_public.future;\n    input r4 as credits.aleo/transfer_public.future;\n    input r5 as pondo_delegator1v1.aleo/set_validator.future;\n    input r6 as pondo_delegator2v1.aleo/set_validator.future;\n    input r7 as pondo_delegator3v1.aleo/set_validator.future;\n    input r8 as pondo_delegator4v1.aleo/set_validator.future;\n    input r9 as pondo_delegator5v1.aleo/set_validator.future;\n    input r10 as [validator_state; 5u32].public;\n    input r11 as [u64; 5u32].public;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n    await r4;\n    await r5;\n    await r6;\n    await r7;\n    await r8;\n    await r9;\n    get validator_set[1u8] into r12;\n    set r12 into validator_set[0u8];\n    remove validator_set[1u8];\n    is.eq r10[0u32].validator r12[0u32].validator into r13;\n    is.eq r10[0u32].commission r12[0u32].commission into r14;\n    and r13 r14 into r15;\n    assert.eq r15 true;\n    is.eq r10[1u32].validator r12[1u32].validator into r16;\n    is.eq r10[1u32].commission r12[1u32].commission into r17;\n    and r16 r17 into r18;\n    assert.eq r18 true;\n    is.eq r10[2u32].validator r12[2u32].validator into r19;\n    is.eq r10[2u32].commission r12[2u32].commission into r20;\n    and r19 r20 into r21;\n    assert.eq r21 true;\n    is.eq r10[3u32].validator r12[3u32].validator into r22;\n    is.eq r10[3u32].commission r12[3u32].commission into r23;\n    and r22 r23 into r24;\n    assert.eq r24 true;\n    is.eq r10[4u32].validator r12[4u32].validator into r25;\n    is.eq r10[4u32].commission r12[4u32].commission into r26;\n    and r25 r26 into r27;\n    assert.eq r27 true;\n    cast  3700u128 2600u128 1600u128 1200u128 900u128 900u128 900u128 900u128 900u128 900u128 into r28 as [u128; 10u32];\n    get.or_use pondo_oraclev1.aleo/delegator_allocation[0u8] r28 into r29;\n    add r11[0u32] r11[1u32] into r30;\n    add r30 r11[2u32] into r31;\n    add r31 r11[3u32] into r32;\n    add r32 r11[4u32] into r33;\n    cast r33 into r34 as u128;\n    cast r11[0u32] into r35 as u128;\n    mul r35 10_000u128 into r36;\n    div r36 r34 into r37;\n    cast r11[1u32] into r38 as u128;\n    mul r38 10_000u128 into r39;\n    div r39 r34 into r40;\n    cast r11[2u32] into r41 as u128;\n    mul r41 10_000u128 into r42;\n    div r42 r34 into r43;\n    cast r11[3u32] into r44 as u128;\n    mul r44 10_000u128 into r45;\n    div r45 r34 into r46;\n    cast r11[4u32] into r47 as u128;\n    mul r47 10_000u128 into r48;\n    div r48 r34 into r49;\n    sub r29[0u32] r37 into r50;\n    lte r50 2u128 into r51;\n    assert.eq r51 true;\n    sub r29[1u32] r40 into r52;\n    lte r52 2u128 into r53;\n    assert.eq r53 true;\n    sub r29[2u32] r43 into r54;\n    lte r54 2u128 into r55;\n    assert.eq r55 true;\n    sub r29[3u32] r46 into r56;\n    lte r56 2u128 into r57;\n    assert.eq r57 true;\n    sub r29[4u32] r49 into r58;\n    lte r58 2u128 into r59;\n    assert.eq r59 true;\n    get.or_use credits.aleo/account[pondo_core_protocolv1.aleo] 0u64 into r60;\n    get balances[2u8] into r61;\n    sub r60 r61 into r62;\n    mul r34 250u128 into r63;\n    div r63 10_000u128 into r64;\n    cast 250_000_000_000u64 into r65 as u128;\n    gt r64 r65 into r66;\n    cast r64 into r67 as u64;\n    ternary r66 250_000_000_000u64 r67 into r68;\n    gte r62 r68 into r69;\n    assert.eq r69 true;\n    add r68 10_000_000u64 into r70;\n    lte r62 r70 into r71;\n    assert.eq r71 true;\n    get.or_use credits.aleo/account[pondo_delegator1v1.aleo] 0u64 into r72;\n    get.or_use credits.aleo/account[pondo_delegator2v1.aleo] 0u64 into r73;\n    get.or_use credits.aleo/account[pondo_delegator3v1.aleo] 0u64 into r74;\n    get.or_use credits.aleo/account[pondo_delegator4v1.aleo] 0u64 into r75;\n    get.or_use credits.aleo/account[pondo_delegator5v1.aleo] 0u64 into r76;\n    add r72 r73 into r77;\n    add r77 r74 into r78;\n    add r78 r75 into r79;\n    add r79 r76 into r80;\n    set r80 into balances[0u8];\n    get protocol_state[0u8] into r81;\n    is.eq r81 2u8 into r82;\n    assert.eq r82 true;\n    set 0u8 into protocol_state[0u8];\n\n\n\n\nfunction set_oracle_tvl:\n    input r0 as u64.public;\n    call pondo_oraclev1.aleo/set_pondo_tvl r0 into r1;\n    async set_oracle_tvl r1 r0 into r2;\n    output r2 as pondo_core_protocolv1.aleo/set_oracle_tvl.future;\n\nfinalize set_oracle_tvl:\n    input r0 as pondo_oraclev1.aleo/set_pondo_tvl.future;\n    input r1 as u64.public;\n    await r0;\n    rem block.height 120_960u32 into r2;\n    lte r2 103_680u32 into r3;\n    assert.eq r3 true;\n    get.or_use credits.aleo/account[pondo_delegator1v1.aleo] 0u64 into r4;\n    get.or_use credits.aleo/account[pondo_delegator2v1.aleo] 0u64 into r5;\n    get.or_use credits.aleo/account[pondo_delegator3v1.aleo] 0u64 into r6;\n    get.or_use credits.aleo/account[pondo_delegator4v1.aleo] 0u64 into r7;\n    get.or_use credits.aleo/account[pondo_delegator5v1.aleo] 0u64 into r8;\n    cast pondo_core_protocolv1.aleo 0u64 into r9 as bond_state;\n    get.or_use credits.aleo/bonded[pondo_delegator1v1.aleo] r9 into r10;\n    get.or_use credits.aleo/bonded[pondo_delegator2v1.aleo] r9 into r11;\n    get.or_use credits.aleo/bonded[pondo_delegator3v1.aleo] r9 into r12;\n    get.or_use credits.aleo/bonded[pondo_delegator4v1.aleo] r9 into r13;\n    get.or_use credits.aleo/bonded[pondo_delegator5v1.aleo] r9 into r14;\n    cast 0u64 0u32 into r15 as unbond_state;\n    get.or_use credits.aleo/unbonding[pondo_delegator1v1.aleo] r15 into r16;\n    get.or_use credits.aleo/unbonding[pondo_delegator2v1.aleo] r15 into r17;\n    get.or_use credits.aleo/unbonding[pondo_delegator3v1.aleo] r15 into r18;\n    get.or_use credits.aleo/unbonding[pondo_delegator4v1.aleo] r15 into r19;\n    get.or_use credits.aleo/unbonding[pondo_delegator5v1.aleo] r15 into r20;\n    get.or_use credits.aleo/account[pondo_core_protocolv1.aleo] 0u64 into r21;\n    add r4 r5 into r22;\n    add r22 r6 into r23;\n    add r23 r7 into r24;\n    add r24 r8 into r25;\n    add r25 r10.microcredits into r26;\n    add r26 r11.microcredits into r27;\n    add r27 r12.microcredits into r28;\n    add r28 r13.microcredits into r29;\n    add r29 r14.microcredits into r30;\n    add r30 r21 into r31;\n    add r31 r16.microcredits into r32;\n    add r32 r17.microcredits into r33;\n    add r33 r18.microcredits into r34;\n    add r34 r19.microcredits into r35;\n    add r35 r20.microcredits into r36;\n    mul r1 98u64 into r37;\n    div r37 100u64 into r38;\n    gte r36 r38 into r39;\n    mul r1 102u64 into r40;\n    div r40 100u64 into r41;\n    lte r36 r41 into r42;\n    and r39 r42 into r43;\n    assert.eq r43 true;\n\n",
  "pondo_oraclev1.aleo": "import credits.aleo;\nprogram pondo_oraclev1.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\nstruct bond_state:\n    validator as address;\n    microcredits as u64;\n\n\nstruct validator_datum:\n    delegator as address;\n    validator as address;\n    block_height as u32;\n    bonded_microcredits as u64;\n    microcredits_yield_per_epoch as u128;\n    commission as u8;\n    boost as u128;\n\nstruct validator_boost:\n    epoch as u32;\n    boost_amount as u64;\n\nstruct admin_operation:\n    arg as field;\n    op_type as u8;\n    request_id as u64;\n\n\nmapping delegator_to_validator:\n\tkey as address.public;\n\tvalue as address.public;\n\n\nmapping validator_data:\n\tkey as address.public;\n\tvalue as validator_datum.public;\n\n\nmapping top_validators:\n\tkey as u8.public;\n\tvalue as [address; 10u32].public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nmapping pondo_tvl:\n\tkey as u8.public;\n\tvalue as u64.public;\n\n\nmapping validator_boosting:\n\tkey as address.public;\n\tvalue as validator_boost.public;\n\n\nmapping control_addresses:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nmapping delegator_allocation:\n\tkey as u8.public;\n\tvalue as [u128; 10u32].public;\n\n\nmapping admin_operations:\n\tkey as u64.public;\n\tvalue as admin_operation.public;\n\n\nfunction initialize:\n    async initialize into r0;\n    output r0 as pondo_oraclev1.aleo/initialize.future;\n\nfinalize initialize:\n    contains delegator_allocation[0u8] into r0;\n    assert.eq r0 false;\n    contains top_validators[0u8] into r1;\n    assert.eq r1 false;\n    set true into control_addresses[aleo12shtwnmf49t5atmad2jnk3e58ahtp749d9trctt9z3wryxyzt5pspp0nd0];\n    set true into control_addresses[aleo1z9y9afh0h6dnyj3f0hvjc4mhayjy06fj42ppcq0rvpmmyky6fuzs449sjr];\n    set true into control_addresses[aleo19x0ctad8llm9y0qssw7eup045c5wxxp6k4al3n0d5r8maulkzu8sh3jwew];\n    set true into control_addresses[aleo16ycrg9g4208lp5y4g5s3gn43xknc5gdsr7wjrpqq9htznj5qk5yqd6px5a];\n    set true into control_addresses[aleo1q59hxe2zmexlu4vgtmtmvyxm4ew047zlf50h5l5zsrdvljusdvrqn78u7s];\n    set false into control_addresses[pondo_delegator1v1.aleo];\n    set false into control_addresses[pondo_delegator2v1.aleo];\n    set false into control_addresses[pondo_delegator3v1.aleo];\n    set false into control_addresses[pondo_delegator4v1.aleo];\n    set false into control_addresses[pondo_delegator5v1.aleo];\n    cast  3700u128 2600u128 1600u128 1200u128 900u128 900u128 900u128 900u128 900u128 900u128 into r2 as [u128; 10u32];\n    set r2 into delegator_allocation[0u8];\n    cast  pondo_oraclev1.aleo pondo_oraclev1.aleo pondo_oraclev1.aleo pondo_oraclev1.aleo pondo_oraclev1.aleo pondo_oraclev1.aleo pondo_oraclev1.aleo pondo_oraclev1.aleo pondo_oraclev1.aleo pondo_oraclev1.aleo into r3 as [address; 10u32];\n    set r3 into top_validators[0u8];\n\n\n\n\nfunction add_control_address:\n    input r0 as address.public;\n    input r1 as signature.public;\n    input r2 as address.public;\n    input r3 as signature.public;\n    input r4 as address.public;\n    input r5 as signature.public;\n    input r6 as address.public;\n    input r7 as u64.public;\n    hash.bhp256 r0 into r8 as field;\n    cast r8 0u8 r7 into r9 as admin_operation;\n    hash.bhp256 r9 into r10 as field;\n    sign.verify r1 r2 r10 into r11;\n    sign.verify r3 r4 r10 into r12;\n    sign.verify r5 r6 r10 into r13;\n    and r11 r12 into r14;\n    and r14 r13 into r15;\n    assert.eq r15 true;\n    assert.neq r2 r4;\n    assert.neq r2 r6;\n    assert.neq r4 r6;\n    async add_control_address r0 r2 r4 r6 r9 into r16;\n    output r16 as pondo_oraclev1.aleo/add_control_address.future;\n\nfinalize add_control_address:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as address.public;\n    input r4 as admin_operation.public;\n    get control_addresses[r1] into r5;\n    get control_addresses[r2] into r6;\n    get control_addresses[r3] into r7;\n    and r5 r6 into r8;\n    and r8 r7 into r9;\n    assert.eq r9 true;\n    contains admin_operations[r4.request_id] into r10;\n    assert.eq r10 false;\n    set r4 into admin_operations[r4.request_id];\n    contains control_addresses[r0] into r11;\n    assert.eq r11 false;\n    set false into control_addresses[r0];\n\n\n\n\nfunction remove_control_address:\n    input r0 as address.public;\n    input r1 as signature.public;\n    input r2 as address.public;\n    input r3 as signature.public;\n    input r4 as address.public;\n    input r5 as signature.public;\n    input r6 as address.public;\n    input r7 as u64.public;\n    hash.bhp256 r0 into r8 as field;\n    cast r8 1u8 r7 into r9 as admin_operation;\n    hash.bhp256 r9 into r10 as field;\n    sign.verify r1 r2 r10 into r11;\n    sign.verify r3 r4 r10 into r12;\n    sign.verify r5 r6 r10 into r13;\n    and r11 r12 into r14;\n    and r14 r13 into r15;\n    assert.eq r15 true;\n    assert.neq r2 r4;\n    assert.neq r2 r6;\n    assert.neq r4 r6;\n    async remove_control_address r0 r2 r4 r6 r9 into r16;\n    output r16 as pondo_oraclev1.aleo/remove_control_address.future;\n\nfinalize remove_control_address:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as address.public;\n    input r4 as admin_operation.public;\n    get control_addresses[r1] into r5;\n    get control_addresses[r2] into r6;\n    get control_addresses[r3] into r7;\n    and r5 r6 into r8;\n    and r8 r7 into r9;\n    assert.eq r9 true;\n    contains admin_operations[r4.request_id] into r10;\n    assert.eq r10 false;\n    set r4 into admin_operations[r4.request_id];\n    get control_addresses[r0] into r11;\n    assert.eq r11 false;\n    remove control_addresses[r0];\n\n\n\n\nfunction update_admin:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as signature.public;\n    input r3 as address.public;\n    input r4 as signature.public;\n    input r5 as address.public;\n    input r6 as signature.public;\n    input r7 as address.public;\n    input r8 as u64.public;\n    cast  r0 r1 into r9 as [address; 2u32];\n    hash.bhp256 r9 into r10 as field;\n    cast r10 3u8 r8 into r11 as admin_operation;\n    hash.bhp256 r11 into r12 as field;\n    sign.verify r2 r3 r12 into r13;\n    sign.verify r4 r5 r12 into r14;\n    sign.verify r6 r7 r12 into r15;\n    and r13 r14 into r16;\n    and r16 r15 into r17;\n    assert.eq r17 true;\n    assert.neq r3 r5;\n    assert.neq r3 r7;\n    assert.neq r5 r7;\n    async update_admin r0 r1 r3 r5 r7 r11 into r18;\n    output r18 as pondo_oraclev1.aleo/update_admin.future;\n\nfinalize update_admin:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as address.public;\n    input r4 as address.public;\n    input r5 as admin_operation.public;\n    get control_addresses[r2] into r6;\n    get control_addresses[r3] into r7;\n    get control_addresses[r4] into r8;\n    and r6 r7 into r9;\n    and r9 r8 into r10;\n    assert.eq r10 true;\n    contains admin_operations[r5.request_id] into r11;\n    assert.eq r11 false;\n    set r5 into admin_operations[r5.request_id];\n    remove control_addresses[r0];\n    set true into control_addresses[r1];\n\n\n\n\nfunction update_delegator_allocations:\n    input r0 as [u128; 10u32].public;\n    input r1 as signature.public;\n    input r2 as address.public;\n    input r3 as signature.public;\n    input r4 as address.public;\n    input r5 as signature.public;\n    input r6 as address.public;\n    input r7 as u64.public;\n    hash.bhp256 r0 into r8 as field;\n    cast r8 2u8 r7 into r9 as admin_operation;\n    hash.bhp256 r9 into r10 as field;\n    sign.verify r1 r2 r10 into r11;\n    sign.verify r3 r4 r10 into r12;\n    sign.verify r5 r6 r10 into r13;\n    and r11 r12 into r14;\n    and r14 r13 into r15;\n    assert.eq r15 true;\n    assert.neq r2 r4;\n    assert.neq r2 r6;\n    assert.neq r4 r6;\n    async update_delegator_allocations r0 r2 r4 r6 r9 into r16;\n    output r16 as pondo_oraclev1.aleo/update_delegator_allocations.future;\n\nfinalize update_delegator_allocations:\n    input r0 as [u128; 10u32].public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as address.public;\n    input r4 as admin_operation.public;\n    get control_addresses[r1] into r5;\n    get control_addresses[r2] into r6;\n    get control_addresses[r3] into r7;\n    and r5 r6 into r8;\n    and r8 r7 into r9;\n    assert.eq r9 true;\n    contains admin_operations[r4.request_id] into r10;\n    assert.eq r10 false;\n    set r4 into admin_operations[r4.request_id];\n    set r0 into delegator_allocation[0u8];\n\n\n\n\nfunction propose_delegator:\n    input r0 as address.public;\n    assert.neq self.caller self.signer;\n    async propose_delegator self.caller r0 into r1;\n    output r1 as pondo_oraclev1.aleo/propose_delegator.future;\n\nfinalize propose_delegator:\n    input r0 as address.public;\n    input r1 as address.public;\n    contains banned_validators[r1] into r2;\n    assert.eq r2 false;\n    contains delegator_to_validator[r0] into r3;\n    assert.eq r3 false;\n    set r1 into delegator_to_validator[r0];\n\n\n\n\nfunction add_delegator:\n    input r0 as address.public;\n    input r1 as signature.public;\n    input r2 as address.public;\n    input r3 as signature.public;\n    input r4 as address.public;\n    input r5 as signature.public;\n    input r6 as address.public;\n    input r7 as u64.public;\n    hash.bhp256 r0 into r8 as field;\n    cast r8 4u8 r7 into r9 as admin_operation;\n    hash.bhp256 r9 into r10 as field;\n    sign.verify r1 r2 r10 into r11;\n    sign.verify r3 r4 r10 into r12;\n    sign.verify r5 r6 r10 into r13;\n    and r11 r12 into r14;\n    and r14 r13 into r15;\n    assert.eq r15 true;\n    assert.neq r2 r4;\n    assert.neq r2 r6;\n    assert.neq r4 r6;\n    async add_delegator r0 r2 r4 r6 r9 into r16;\n    output r16 as pondo_oraclev1.aleo/add_delegator.future;\n\nfinalize add_delegator:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as address.public;\n    input r4 as admin_operation.public;\n    get control_addresses[r1] into r5;\n    get control_addresses[r2] into r6;\n    get control_addresses[r3] into r7;\n    and r5 r6 into r8;\n    and r8 r7 into r9;\n    assert.eq r9 true;\n    contains admin_operations[r4.request_id] into r10;\n    assert.eq r10 false;\n    set r4 into admin_operations[r4.request_id];\n    contains delegator_to_validator[r0] into r11;\n    assert.eq r11 true;\n    get credits.aleo/withdraw[r0] into r12;\n    assert.eq r12 r0;\n    get delegator_to_validator[r0] into r13;\n    get credits.aleo/bonded[r0] into r14;\n    assert.eq r14.validator r13;\n    contains banned_validators[r13] into r15;\n    assert.eq r15 false;\n    contains validator_data[r0] into r16;\n    assert.eq r16 false;\n    get credits.aleo/committee[r13] into r17;\n    assert.eq r17.is_open true;\n    lt r17.commission 50u8 into r18;\n    assert.eq r18 true;\n    cast r0 r13 block.height r14.microcredits 0u128 r17.commission 0u128 into r19 as validator_datum;\n    set r19 into validator_data[r0];\n\n\n\n\n\n\n\n\nfunction update_data:\n    input r0 as address.public;\n    async update_data r0 into r1;\n    output r1 as pondo_oraclev1.aleo/update_data.future;\n\nfinalize update_data:\n    input r0 as address.public;\n    get validator_data[r0] into r1;\n    contains banned_validators[r1.validator] into r2;\n    assert.eq r2 false;\n    rem block.height 120_960u32 into r3;\n    gte r3 103_680u32 into r4;\n    assert.eq r4 true;\n    sub block.height r1.block_height into r5;\n    gt r5 103_680u32 into r6;\n    assert.eq r6 true;\n    get credits.aleo/committee[r1.validator] into r7;\n    lt r7.commission 50u8 into r8;\n    assert.eq r8 true;\n    assert.eq r7.is_open true;\n    get credits.aleo/bonded[r0] into r9;\n    div block.height 120_960u32 into r10;\n    cast r9.microcredits into r11 as u128;\n    cast r1.bonded_microcredits into r12 as u128;\n    sub r11 r12 into r13;\n    mul r13 10_000_000_000u128 into r14;\n    cast r1.bonded_microcredits into r15 as u128;\n    div r14 r15 into r16;\n    cast 120_960u32 into r17 as u128;\n    mul r16 r17 into r18;\n    cast r5 into r19 as u128;\n    div r18 r19 into r20;\n    cast 0u32 0u64 into r21 as validator_boost;\n    get.or_use validator_boosting[r1.validator] r21 into r22;\n    is.eq r22.epoch r10 into r23;\n    cast r22.boost_amount into r24 as u128;\n    ternary r23 r24 0u128 into r25;\n    get.or_use pondo_tvl[0u8] 10_000_000_000_000_000u64 into r26;\n    cast r26 into r27 as u128;\n    mul r25 10_000_000_000u128 into r28;\n    cast r27 into r29 as u128;\n    div r28 r29 into r30;\n    div r1.block_height 120_960u32 into r31;\n    add r31 1u32 into r32;\n    is.eq r32 r10 into r33;\n    ternary r33 r20 0u128 into r34;\n    cast r0 r1.validator block.height r9.microcredits r34 r7.commission r30 into r35 as validator_datum;\n    get top_validators[0u8] into r36;\n    cast pondo_oraclev1.aleo pondo_oraclev1.aleo 0u32 0u64 0u128 0u8 0u128 into r37 as validator_datum;\n    get.or_use validator_data[r36[0u32]] r37 into r38;\n    get.or_use validator_data[r36[1u32]] r37 into r39;\n    get.or_use validator_data[r36[2u32]] r37 into r40;\n    get.or_use validator_data[r36[3u32]] r37 into r41;\n    get.or_use validator_data[r36[4u32]] r37 into r42;\n    get.or_use validator_data[r36[5u32]] r37 into r43;\n    get.or_use validator_data[r36[6u32]] r37 into r44;\n    get.or_use validator_data[r36[7u32]] r37 into r45;\n    get.or_use validator_data[r36[8u32]] r37 into r46;\n    get.or_use validator_data[r36[9u32]] r37 into r47;\n    mul r10 120_960u32 into r48;\n    get delegator_allocation[0u8] into r49;\n    lt r38.block_height r48 into r50;\n    lt r35.block_height r48 into r51;\n    is.eq r38.microcredits_yield_per_epoch 0u128 into r52;\n    is.eq r35.microcredits_yield_per_epoch 0u128 into r53;\n    mul r35.boost 10_000u128 into r54;\n    div r54 r49[0u32] into r55;\n    add r35.microcredits_yield_per_epoch r55 into r56;\n    mul r38.boost 10_000u128 into r57;\n    div r57 r49[0u32] into r58;\n    add r38.microcredits_yield_per_epoch r58 into r59;\n    lt r56 r59 into r60;\n    ternary r60 r38.delegator r35.delegator into r61;\n    ternary r60 r38.validator r35.validator into r62;\n    ternary r60 r38.block_height r35.block_height into r63;\n    ternary r60 r38.bonded_microcredits r35.bonded_microcredits into r64;\n    ternary r60 r38.microcredits_yield_per_epoch r35.microcredits_yield_per_epoch into r65;\n    ternary r60 r38.commission r35.commission into r66;\n    ternary r60 r38.boost r35.boost into r67;\n    cast r61 r62 r63 r64 r65 r66 r67 into r68 as validator_datum;\n    ternary r60 r35.delegator r38.delegator into r69;\n    ternary r60 r35.validator r38.validator into r70;\n    ternary r60 r35.block_height r38.block_height into r71;\n    ternary r60 r35.bonded_microcredits r38.bonded_microcredits into r72;\n    ternary r60 r35.microcredits_yield_per_epoch r38.microcredits_yield_per_epoch into r73;\n    ternary r60 r35.commission r38.commission into r74;\n    ternary r60 r35.boost r38.boost into r75;\n    cast r69 r70 r71 r72 r73 r74 r75 into r76 as validator_datum;\n    ternary r53 r38.delegator r68.delegator into r77;\n    ternary r53 r38.validator r68.validator into r78;\n    ternary r53 r38.block_height r68.block_height into r79;\n    ternary r53 r38.bonded_microcredits r68.bonded_microcredits into r80;\n    ternary r53 r38.microcredits_yield_per_epoch r68.microcredits_yield_per_epoch into r81;\n    ternary r53 r38.commission r68.commission into r82;\n    ternary r53 r38.boost r68.boost into r83;\n    cast r77 r78 r79 r80 r81 r82 r83 into r84 as validator_datum;\n    ternary r53 r35.delegator r76.delegator into r85;\n    ternary r53 r35.validator r76.validator into r86;\n    ternary r53 r35.block_height r76.block_height into r87;\n    ternary r53 r35.bonded_microcredits r76.bonded_microcredits into r88;\n    ternary r53 r35.microcredits_yield_per_epoch r76.microcredits_yield_per_epoch into r89;\n    ternary r53 r35.commission r76.commission into r90;\n    ternary r53 r35.boost r76.boost into r91;\n    cast r85 r86 r87 r88 r89 r90 r91 into r92 as validator_datum;\n    ternary r52 r35.delegator r84.delegator into r93;\n    ternary r52 r35.validator r84.validator into r94;\n    ternary r52 r35.block_height r84.block_height into r95;\n    ternary r52 r35.bonded_microcredits r84.bonded_microcredits into r96;\n    ternary r52 r35.microcredits_yield_per_epoch r84.microcredits_yield_per_epoch into r97;\n    ternary r52 r35.commission r84.commission into r98;\n    ternary r52 r35.boost r84.boost into r99;\n    cast r93 r94 r95 r96 r97 r98 r99 into r100 as validator_datum;\n    ternary r52 r38.delegator r92.delegator into r101;\n    ternary r52 r38.validator r92.validator into r102;\n    ternary r52 r38.block_height r92.block_height into r103;\n    ternary r52 r38.bonded_microcredits r92.bonded_microcredits into r104;\n    ternary r52 r38.microcredits_yield_per_epoch r92.microcredits_yield_per_epoch into r105;\n    ternary r52 r38.commission r92.commission into r106;\n    ternary r52 r38.boost r92.boost into r107;\n    cast r101 r102 r103 r104 r105 r106 r107 into r108 as validator_datum;\n    ternary r51 r38.delegator r100.delegator into r109;\n    ternary r51 r38.validator r100.validator into r110;\n    ternary r51 r38.block_height r100.block_height into r111;\n    ternary r51 r38.bonded_microcredits r100.bonded_microcredits into r112;\n    ternary r51 r38.microcredits_yield_per_epoch r100.microcredits_yield_per_epoch into r113;\n    ternary r51 r38.commission r100.commission into r114;\n    ternary r51 r38.boost r100.boost into r115;\n    cast r109 r110 r111 r112 r113 r114 r115 into r116 as validator_datum;\n    ternary r51 r35.delegator r108.delegator into r117;\n    ternary r51 r35.validator r108.validator into r118;\n    ternary r51 r35.block_height r108.block_height into r119;\n    ternary r51 r35.bonded_microcredits r108.bonded_microcredits into r120;\n    ternary r51 r35.microcredits_yield_per_epoch r108.microcredits_yield_per_epoch into r121;\n    ternary r51 r35.commission r108.commission into r122;\n    ternary r51 r35.boost r108.boost into r123;\n    cast r117 r118 r119 r120 r121 r122 r123 into r124 as validator_datum;\n    ternary r50 r35.delegator r116.delegator into r125;\n    ternary r50 r35.validator r116.validator into r126;\n    ternary r50 r35.block_height r116.block_height into r127;\n    ternary r50 r35.bonded_microcredits r116.bonded_microcredits into r128;\n    ternary r50 r35.microcredits_yield_per_epoch r116.microcredits_yield_per_epoch into r129;\n    ternary r50 r35.commission r116.commission into r130;\n    ternary r50 r35.boost r116.boost into r131;\n    cast r125 r126 r127 r128 r129 r130 r131 into r132 as validator_datum;\n    ternary r50 r38.delegator r124.delegator into r133;\n    ternary r50 r38.validator r124.validator into r134;\n    ternary r50 r38.block_height r124.block_height into r135;\n    ternary r50 r38.bonded_microcredits r124.bonded_microcredits into r136;\n    ternary r50 r38.microcredits_yield_per_epoch r124.microcredits_yield_per_epoch into r137;\n    ternary r50 r38.commission r124.commission into r138;\n    ternary r50 r38.boost r124.boost into r139;\n    cast r133 r134 r135 r136 r137 r138 r139 into r140 as validator_datum;\n    lt r39.block_height r48 into r141;\n    lt r140.block_height r48 into r142;\n    is.eq r39.microcredits_yield_per_epoch 0u128 into r143;\n    is.eq r140.microcredits_yield_per_epoch 0u128 into r144;\n    mul r140.boost 10_000u128 into r145;\n    div r145 r49[1u32] into r146;\n    add r140.microcredits_yield_per_epoch r146 into r147;\n    mul r39.boost 10_000u128 into r148;\n    div r148 r49[1u32] into r149;\n    add r39.microcredits_yield_per_epoch r149 into r150;\n    lt r147 r150 into r151;\n    ternary r151 r39.delegator r140.delegator into r152;\n    ternary r151 r39.validator r140.validator into r153;\n    ternary r151 r39.block_height r140.block_height into r154;\n    ternary r151 r39.bonded_microcredits r140.bonded_microcredits into r155;\n    ternary r151 r39.microcredits_yield_per_epoch r140.microcredits_yield_per_epoch into r156;\n    ternary r151 r39.commission r140.commission into r157;\n    ternary r151 r39.boost r140.boost into r158;\n    cast r152 r153 r154 r155 r156 r157 r158 into r159 as validator_datum;\n    ternary r151 r140.delegator r39.delegator into r160;\n    ternary r151 r140.validator r39.validator into r161;\n    ternary r151 r140.block_height r39.block_height into r162;\n    ternary r151 r140.bonded_microcredits r39.bonded_microcredits into r163;\n    ternary r151 r140.microcredits_yield_per_epoch r39.microcredits_yield_per_epoch into r164;\n    ternary r151 r140.commission r39.commission into r165;\n    ternary r151 r140.boost r39.boost into r166;\n    cast r160 r161 r162 r163 r164 r165 r166 into r167 as validator_datum;\n    ternary r144 r39.delegator r159.delegator into r168;\n    ternary r144 r39.validator r159.validator into r169;\n    ternary r144 r39.block_height r159.block_height into r170;\n    ternary r144 r39.bonded_microcredits r159.bonded_microcredits into r171;\n    ternary r144 r39.microcredits_yield_per_epoch r159.microcredits_yield_per_epoch into r172;\n    ternary r144 r39.commission r159.commission into r173;\n    ternary r144 r39.boost r159.boost into r174;\n    cast r168 r169 r170 r171 r172 r173 r174 into r175 as validator_datum;\n    ternary r144 r140.delegator r167.delegator into r176;\n    ternary r144 r140.validator r167.validator into r177;\n    ternary r144 r140.block_height r167.block_height into r178;\n    ternary r144 r140.bonded_microcredits r167.bonded_microcredits into r179;\n    ternary r144 r140.microcredits_yield_per_epoch r167.microcredits_yield_per_epoch into r180;\n    ternary r144 r140.commission r167.commission into r181;\n    ternary r144 r140.boost r167.boost into r182;\n    cast r176 r177 r178 r179 r180 r181 r182 into r183 as validator_datum;\n    ternary r143 r140.delegator r175.delegator into r184;\n    ternary r143 r140.validator r175.validator into r185;\n    ternary r143 r140.block_height r175.block_height into r186;\n    ternary r143 r140.bonded_microcredits r175.bonded_microcredits into r187;\n    ternary r143 r140.microcredits_yield_per_epoch r175.microcredits_yield_per_epoch into r188;\n    ternary r143 r140.commission r175.commission into r189;\n    ternary r143 r140.boost r175.boost into r190;\n    cast r184 r185 r186 r187 r188 r189 r190 into r191 as validator_datum;\n    ternary r143 r39.delegator r183.delegator into r192;\n    ternary r143 r39.validator r183.validator into r193;\n    ternary r143 r39.block_height r183.block_height into r194;\n    ternary r143 r39.bonded_microcredits r183.bonded_microcredits into r195;\n    ternary r143 r39.microcredits_yield_per_epoch r183.microcredits_yield_per_epoch into r196;\n    ternary r143 r39.commission r183.commission into r197;\n    ternary r143 r39.boost r183.boost into r198;\n    cast r192 r193 r194 r195 r196 r197 r198 into r199 as validator_datum;\n    ternary r142 r39.delegator r191.delegator into r200;\n    ternary r142 r39.validator r191.validator into r201;\n    ternary r142 r39.block_height r191.block_height into r202;\n    ternary r142 r39.bonded_microcredits r191.bonded_microcredits into r203;\n    ternary r142 r39.microcredits_yield_per_epoch r191.microcredits_yield_per_epoch into r204;\n    ternary r142 r39.commission r191.commission into r205;\n    ternary r142 r39.boost r191.boost into r206;\n    cast r200 r201 r202 r203 r204 r205 r206 into r207 as validator_datum;\n    ternary r142 r140.delegator r199.delegator into r208;\n    ternary r142 r140.validator r199.validator into r209;\n    ternary r142 r140.block_height r199.block_height into r210;\n    ternary r142 r140.bonded_microcredits r199.bonded_microcredits into r211;\n    ternary r142 r140.microcredits_yield_per_epoch r199.microcredits_yield_per_epoch into r212;\n    ternary r142 r140.commission r199.commission into r213;\n    ternary r142 r140.boost r199.boost into r214;\n    cast r208 r209 r210 r211 r212 r213 r214 into r215 as validator_datum;\n    ternary r141 r140.delegator r207.delegator into r216;\n    ternary r141 r140.validator r207.validator into r217;\n    ternary r141 r140.block_height r207.block_height into r218;\n    ternary r141 r140.bonded_microcredits r207.bonded_microcredits into r219;\n    ternary r141 r140.microcredits_yield_per_epoch r207.microcredits_yield_per_epoch into r220;\n    ternary r141 r140.commission r207.commission into r221;\n    ternary r141 r140.boost r207.boost into r222;\n    cast r216 r217 r218 r219 r220 r221 r222 into r223 as validator_datum;\n    ternary r141 r39.delegator r215.delegator into r224;\n    ternary r141 r39.validator r215.validator into r225;\n    ternary r141 r39.block_height r215.block_height into r226;\n    ternary r141 r39.bonded_microcredits r215.bonded_microcredits into r227;\n    ternary r141 r39.microcredits_yield_per_epoch r215.microcredits_yield_per_epoch into r228;\n    ternary r141 r39.commission r215.commission into r229;\n    ternary r141 r39.boost r215.boost into r230;\n    cast r224 r225 r226 r227 r228 r229 r230 into r231 as validator_datum;\n    lt r40.block_height r48 into r232;\n    lt r231.block_height r48 into r233;\n    is.eq r40.microcredits_yield_per_epoch 0u128 into r234;\n    is.eq r231.microcredits_yield_per_epoch 0u128 into r235;\n    mul r231.boost 10_000u128 into r236;\n    div r236 r49[2u32] into r237;\n    add r231.microcredits_yield_per_epoch r237 into r238;\n    mul r40.boost 10_000u128 into r239;\n    div r239 r49[2u32] into r240;\n    add r40.microcredits_yield_per_epoch r240 into r241;\n    lt r238 r241 into r242;\n    ternary r242 r40.delegator r231.delegator into r243;\n    ternary r242 r40.validator r231.validator into r244;\n    ternary r242 r40.block_height r231.block_height into r245;\n    ternary r242 r40.bonded_microcredits r231.bonded_microcredits into r246;\n    ternary r242 r40.microcredits_yield_per_epoch r231.microcredits_yield_per_epoch into r247;\n    ternary r242 r40.commission r231.commission into r248;\n    ternary r242 r40.boost r231.boost into r249;\n    cast r243 r244 r245 r246 r247 r248 r249 into r250 as validator_datum;\n    ternary r242 r231.delegator r40.delegator into r251;\n    ternary r242 r231.validator r40.validator into r252;\n    ternary r242 r231.block_height r40.block_height into r253;\n    ternary r242 r231.bonded_microcredits r40.bonded_microcredits into r254;\n    ternary r242 r231.microcredits_yield_per_epoch r40.microcredits_yield_per_epoch into r255;\n    ternary r242 r231.commission r40.commission into r256;\n    ternary r242 r231.boost r40.boost into r257;\n    cast r251 r252 r253 r254 r255 r256 r257 into r258 as validator_datum;\n    ternary r235 r40.delegator r250.delegator into r259;\n    ternary r235 r40.validator r250.validator into r260;\n    ternary r235 r40.block_height r250.block_height into r261;\n    ternary r235 r40.bonded_microcredits r250.bonded_microcredits into r262;\n    ternary r235 r40.microcredits_yield_per_epoch r250.microcredits_yield_per_epoch into r263;\n    ternary r235 r40.commission r250.commission into r264;\n    ternary r235 r40.boost r250.boost into r265;\n    cast r259 r260 r261 r262 r263 r264 r265 into r266 as validator_datum;\n    ternary r235 r231.delegator r258.delegator into r267;\n    ternary r235 r231.validator r258.validator into r268;\n    ternary r235 r231.block_height r258.block_height into r269;\n    ternary r235 r231.bonded_microcredits r258.bonded_microcredits into r270;\n    ternary r235 r231.microcredits_yield_per_epoch r258.microcredits_yield_per_epoch into r271;\n    ternary r235 r231.commission r258.commission into r272;\n    ternary r235 r231.boost r258.boost into r273;\n    cast r267 r268 r269 r270 r271 r272 r273 into r274 as validator_datum;\n    ternary r234 r231.delegator r266.delegator into r275;\n    ternary r234 r231.validator r266.validator into r276;\n    ternary r234 r231.block_height r266.block_height into r277;\n    ternary r234 r231.bonded_microcredits r266.bonded_microcredits into r278;\n    ternary r234 r231.microcredits_yield_per_epoch r266.microcredits_yield_per_epoch into r279;\n    ternary r234 r231.commission r266.commission into r280;\n    ternary r234 r231.boost r266.boost into r281;\n    cast r275 r276 r277 r278 r279 r280 r281 into r282 as validator_datum;\n    ternary r234 r40.delegator r274.delegator into r283;\n    ternary r234 r40.validator r274.validator into r284;\n    ternary r234 r40.block_height r274.block_height into r285;\n    ternary r234 r40.bonded_microcredits r274.bonded_microcredits into r286;\n    ternary r234 r40.microcredits_yield_per_epoch r274.microcredits_yield_per_epoch into r287;\n    ternary r234 r40.commission r274.commission into r288;\n    ternary r234 r40.boost r274.boost into r289;\n    cast r283 r284 r285 r286 r287 r288 r289 into r290 as validator_datum;\n    ternary r233 r40.delegator r282.delegator into r291;\n    ternary r233 r40.validator r282.validator into r292;\n    ternary r233 r40.block_height r282.block_height into r293;\n    ternary r233 r40.bonded_microcredits r282.bonded_microcredits into r294;\n    ternary r233 r40.microcredits_yield_per_epoch r282.microcredits_yield_per_epoch into r295;\n    ternary r233 r40.commission r282.commission into r296;\n    ternary r233 r40.boost r282.boost into r297;\n    cast r291 r292 r293 r294 r295 r296 r297 into r298 as validator_datum;\n    ternary r233 r231.delegator r290.delegator into r299;\n    ternary r233 r231.validator r290.validator into r300;\n    ternary r233 r231.block_height r290.block_height into r301;\n    ternary r233 r231.bonded_microcredits r290.bonded_microcredits into r302;\n    ternary r233 r231.microcredits_yield_per_epoch r290.microcredits_yield_per_epoch into r303;\n    ternary r233 r231.commission r290.commission into r304;\n    ternary r233 r231.boost r290.boost into r305;\n    cast r299 r300 r301 r302 r303 r304 r305 into r306 as validator_datum;\n    ternary r232 r231.delegator r298.delegator into r307;\n    ternary r232 r231.validator r298.validator into r308;\n    ternary r232 r231.block_height r298.block_height into r309;\n    ternary r232 r231.bonded_microcredits r298.bonded_microcredits into r310;\n    ternary r232 r231.microcredits_yield_per_epoch r298.microcredits_yield_per_epoch into r311;\n    ternary r232 r231.commission r298.commission into r312;\n    ternary r232 r231.boost r298.boost into r313;\n    cast r307 r308 r309 r310 r311 r312 r313 into r314 as validator_datum;\n    ternary r232 r40.delegator r306.delegator into r315;\n    ternary r232 r40.validator r306.validator into r316;\n    ternary r232 r40.block_height r306.block_height into r317;\n    ternary r232 r40.bonded_microcredits r306.bonded_microcredits into r318;\n    ternary r232 r40.microcredits_yield_per_epoch r306.microcredits_yield_per_epoch into r319;\n    ternary r232 r40.commission r306.commission into r320;\n    ternary r232 r40.boost r306.boost into r321;\n    cast r315 r316 r317 r318 r319 r320 r321 into r322 as validator_datum;\n    lt r41.block_height r48 into r323;\n    lt r322.block_height r48 into r324;\n    is.eq r41.microcredits_yield_per_epoch 0u128 into r325;\n    is.eq r322.microcredits_yield_per_epoch 0u128 into r326;\n    mul r322.boost 10_000u128 into r327;\n    div r327 r49[3u32] into r328;\n    add r322.microcredits_yield_per_epoch r328 into r329;\n    mul r41.boost 10_000u128 into r330;\n    div r330 r49[3u32] into r331;\n    add r41.microcredits_yield_per_epoch r331 into r332;\n    lt r329 r332 into r333;\n    ternary r333 r41.delegator r322.delegator into r334;\n    ternary r333 r41.validator r322.validator into r335;\n    ternary r333 r41.block_height r322.block_height into r336;\n    ternary r333 r41.bonded_microcredits r322.bonded_microcredits into r337;\n    ternary r333 r41.microcredits_yield_per_epoch r322.microcredits_yield_per_epoch into r338;\n    ternary r333 r41.commission r322.commission into r339;\n    ternary r333 r41.boost r322.boost into r340;\n    cast r334 r335 r336 r337 r338 r339 r340 into r341 as validator_datum;\n    ternary r333 r322.delegator r41.delegator into r342;\n    ternary r333 r322.validator r41.validator into r343;\n    ternary r333 r322.block_height r41.block_height into r344;\n    ternary r333 r322.bonded_microcredits r41.bonded_microcredits into r345;\n    ternary r333 r322.microcredits_yield_per_epoch r41.microcredits_yield_per_epoch into r346;\n    ternary r333 r322.commission r41.commission into r347;\n    ternary r333 r322.boost r41.boost into r348;\n    cast r342 r343 r344 r345 r346 r347 r348 into r349 as validator_datum;\n    ternary r326 r41.delegator r341.delegator into r350;\n    ternary r326 r41.validator r341.validator into r351;\n    ternary r326 r41.block_height r341.block_height into r352;\n    ternary r326 r41.bonded_microcredits r341.bonded_microcredits into r353;\n    ternary r326 r41.microcredits_yield_per_epoch r341.microcredits_yield_per_epoch into r354;\n    ternary r326 r41.commission r341.commission into r355;\n    ternary r326 r41.boost r341.boost into r356;\n    cast r350 r351 r352 r353 r354 r355 r356 into r357 as validator_datum;\n    ternary r326 r322.delegator r349.delegator into r358;\n    ternary r326 r322.validator r349.validator into r359;\n    ternary r326 r322.block_height r349.block_height into r360;\n    ternary r326 r322.bonded_microcredits r349.bonded_microcredits into r361;\n    ternary r326 r322.microcredits_yield_per_epoch r349.microcredits_yield_per_epoch into r362;\n    ternary r326 r322.commission r349.commission into r363;\n    ternary r326 r322.boost r349.boost into r364;\n    cast r358 r359 r360 r361 r362 r363 r364 into r365 as validator_datum;\n    ternary r325 r322.delegator r357.delegator into r366;\n    ternary r325 r322.validator r357.validator into r367;\n    ternary r325 r322.block_height r357.block_height into r368;\n    ternary r325 r322.bonded_microcredits r357.bonded_microcredits into r369;\n    ternary r325 r322.microcredits_yield_per_epoch r357.microcredits_yield_per_epoch into r370;\n    ternary r325 r322.commission r357.commission into r371;\n    ternary r325 r322.boost r357.boost into r372;\n    cast r366 r367 r368 r369 r370 r371 r372 into r373 as validator_datum;\n    ternary r325 r41.delegator r365.delegator into r374;\n    ternary r325 r41.validator r365.validator into r375;\n    ternary r325 r41.block_height r365.block_height into r376;\n    ternary r325 r41.bonded_microcredits r365.bonded_microcredits into r377;\n    ternary r325 r41.microcredits_yield_per_epoch r365.microcredits_yield_per_epoch into r378;\n    ternary r325 r41.commission r365.commission into r379;\n    ternary r325 r41.boost r365.boost into r380;\n    cast r374 r375 r376 r377 r378 r379 r380 into r381 as validator_datum;\n    ternary r324 r41.delegator r373.delegator into r382;\n    ternary r324 r41.validator r373.validator into r383;\n    ternary r324 r41.block_height r373.block_height into r384;\n    ternary r324 r41.bonded_microcredits r373.bonded_microcredits into r385;\n    ternary r324 r41.microcredits_yield_per_epoch r373.microcredits_yield_per_epoch into r386;\n    ternary r324 r41.commission r373.commission into r387;\n    ternary r324 r41.boost r373.boost into r388;\n    cast r382 r383 r384 r385 r386 r387 r388 into r389 as validator_datum;\n    ternary r324 r322.delegator r381.delegator into r390;\n    ternary r324 r322.validator r381.validator into r391;\n    ternary r324 r322.block_height r381.block_height into r392;\n    ternary r324 r322.bonded_microcredits r381.bonded_microcredits into r393;\n    ternary r324 r322.microcredits_yield_per_epoch r381.microcredits_yield_per_epoch into r394;\n    ternary r324 r322.commission r381.commission into r395;\n    ternary r324 r322.boost r381.boost into r396;\n    cast r390 r391 r392 r393 r394 r395 r396 into r397 as validator_datum;\n    ternary r323 r322.delegator r389.delegator into r398;\n    ternary r323 r322.validator r389.validator into r399;\n    ternary r323 r322.block_height r389.block_height into r400;\n    ternary r323 r322.bonded_microcredits r389.bonded_microcredits into r401;\n    ternary r323 r322.microcredits_yield_per_epoch r389.microcredits_yield_per_epoch into r402;\n    ternary r323 r322.commission r389.commission into r403;\n    ternary r323 r322.boost r389.boost into r404;\n    cast r398 r399 r400 r401 r402 r403 r404 into r405 as validator_datum;\n    ternary r323 r41.delegator r397.delegator into r406;\n    ternary r323 r41.validator r397.validator into r407;\n    ternary r323 r41.block_height r397.block_height into r408;\n    ternary r323 r41.bonded_microcredits r397.bonded_microcredits into r409;\n    ternary r323 r41.microcredits_yield_per_epoch r397.microcredits_yield_per_epoch into r410;\n    ternary r323 r41.commission r397.commission into r411;\n    ternary r323 r41.boost r397.boost into r412;\n    cast r406 r407 r408 r409 r410 r411 r412 into r413 as validator_datum;\n    lt r42.block_height r48 into r414;\n    lt r413.block_height r48 into r415;\n    is.eq r42.microcredits_yield_per_epoch 0u128 into r416;\n    is.eq r413.microcredits_yield_per_epoch 0u128 into r417;\n    mul r413.boost 10_000u128 into r418;\n    div r418 r49[4u32] into r419;\n    add r413.microcredits_yield_per_epoch r419 into r420;\n    mul r42.boost 10_000u128 into r421;\n    div r421 r49[4u32] into r422;\n    add r42.microcredits_yield_per_epoch r422 into r423;\n    lt r420 r423 into r424;\n    ternary r424 r42.delegator r413.delegator into r425;\n    ternary r424 r42.validator r413.validator into r426;\n    ternary r424 r42.block_height r413.block_height into r427;\n    ternary r424 r42.bonded_microcredits r413.bonded_microcredits into r428;\n    ternary r424 r42.microcredits_yield_per_epoch r413.microcredits_yield_per_epoch into r429;\n    ternary r424 r42.commission r413.commission into r430;\n    ternary r424 r42.boost r413.boost into r431;\n    cast r425 r426 r427 r428 r429 r430 r431 into r432 as validator_datum;\n    ternary r424 r413.delegator r42.delegator into r433;\n    ternary r424 r413.validator r42.validator into r434;\n    ternary r424 r413.block_height r42.block_height into r435;\n    ternary r424 r413.bonded_microcredits r42.bonded_microcredits into r436;\n    ternary r424 r413.microcredits_yield_per_epoch r42.microcredits_yield_per_epoch into r437;\n    ternary r424 r413.commission r42.commission into r438;\n    ternary r424 r413.boost r42.boost into r439;\n    cast r433 r434 r435 r436 r437 r438 r439 into r440 as validator_datum;\n    ternary r417 r42.delegator r432.delegator into r441;\n    ternary r417 r42.validator r432.validator into r442;\n    ternary r417 r42.block_height r432.block_height into r443;\n    ternary r417 r42.bonded_microcredits r432.bonded_microcredits into r444;\n    ternary r417 r42.microcredits_yield_per_epoch r432.microcredits_yield_per_epoch into r445;\n    ternary r417 r42.commission r432.commission into r446;\n    ternary r417 r42.boost r432.boost into r447;\n    cast r441 r442 r443 r444 r445 r446 r447 into r448 as validator_datum;\n    ternary r417 r413.delegator r440.delegator into r449;\n    ternary r417 r413.validator r440.validator into r450;\n    ternary r417 r413.block_height r440.block_height into r451;\n    ternary r417 r413.bonded_microcredits r440.bonded_microcredits into r452;\n    ternary r417 r413.microcredits_yield_per_epoch r440.microcredits_yield_per_epoch into r453;\n    ternary r417 r413.commission r440.commission into r454;\n    ternary r417 r413.boost r440.boost into r455;\n    cast r449 r450 r451 r452 r453 r454 r455 into r456 as validator_datum;\n    ternary r416 r413.delegator r448.delegator into r457;\n    ternary r416 r413.validator r448.validator into r458;\n    ternary r416 r413.block_height r448.block_height into r459;\n    ternary r416 r413.bonded_microcredits r448.bonded_microcredits into r460;\n    ternary r416 r413.microcredits_yield_per_epoch r448.microcredits_yield_per_epoch into r461;\n    ternary r416 r413.commission r448.commission into r462;\n    ternary r416 r413.boost r448.boost into r463;\n    cast r457 r458 r459 r460 r461 r462 r463 into r464 as validator_datum;\n    ternary r416 r42.delegator r456.delegator into r465;\n    ternary r416 r42.validator r456.validator into r466;\n    ternary r416 r42.block_height r456.block_height into r467;\n    ternary r416 r42.bonded_microcredits r456.bonded_microcredits into r468;\n    ternary r416 r42.microcredits_yield_per_epoch r456.microcredits_yield_per_epoch into r469;\n    ternary r416 r42.commission r456.commission into r470;\n    ternary r416 r42.boost r456.boost into r471;\n    cast r465 r466 r467 r468 r469 r470 r471 into r472 as validator_datum;\n    ternary r415 r42.delegator r464.delegator into r473;\n    ternary r415 r42.validator r464.validator into r474;\n    ternary r415 r42.block_height r464.block_height into r475;\n    ternary r415 r42.bonded_microcredits r464.bonded_microcredits into r476;\n    ternary r415 r42.microcredits_yield_per_epoch r464.microcredits_yield_per_epoch into r477;\n    ternary r415 r42.commission r464.commission into r478;\n    ternary r415 r42.boost r464.boost into r479;\n    cast r473 r474 r475 r476 r477 r478 r479 into r480 as validator_datum;\n    ternary r415 r413.delegator r472.delegator into r481;\n    ternary r415 r413.validator r472.validator into r482;\n    ternary r415 r413.block_height r472.block_height into r483;\n    ternary r415 r413.bonded_microcredits r472.bonded_microcredits into r484;\n    ternary r415 r413.microcredits_yield_per_epoch r472.microcredits_yield_per_epoch into r485;\n    ternary r415 r413.commission r472.commission into r486;\n    ternary r415 r413.boost r472.boost into r487;\n    cast r481 r482 r483 r484 r485 r486 r487 into r488 as validator_datum;\n    ternary r414 r413.delegator r480.delegator into r489;\n    ternary r414 r413.validator r480.validator into r490;\n    ternary r414 r413.block_height r480.block_height into r491;\n    ternary r414 r413.bonded_microcredits r480.bonded_microcredits into r492;\n    ternary r414 r413.microcredits_yield_per_epoch r480.microcredits_yield_per_epoch into r493;\n    ternary r414 r413.commission r480.commission into r494;\n    ternary r414 r413.boost r480.boost into r495;\n    cast r489 r490 r491 r492 r493 r494 r495 into r496 as validator_datum;\n    ternary r414 r42.delegator r488.delegator into r497;\n    ternary r414 r42.validator r488.validator into r498;\n    ternary r414 r42.block_height r488.block_height into r499;\n    ternary r414 r42.bonded_microcredits r488.bonded_microcredits into r500;\n    ternary r414 r42.microcredits_yield_per_epoch r488.microcredits_yield_per_epoch into r501;\n    ternary r414 r42.commission r488.commission into r502;\n    ternary r414 r42.boost r488.boost into r503;\n    cast r497 r498 r499 r500 r501 r502 r503 into r504 as validator_datum;\n    lt r43.block_height r48 into r505;\n    lt r504.block_height r48 into r506;\n    is.eq r43.microcredits_yield_per_epoch 0u128 into r507;\n    is.eq r504.microcredits_yield_per_epoch 0u128 into r508;\n    mul r504.boost 10_000u128 into r509;\n    div r509 r49[5u32] into r510;\n    add r504.microcredits_yield_per_epoch r510 into r511;\n    mul r43.boost 10_000u128 into r512;\n    div r512 r49[5u32] into r513;\n    add r43.microcredits_yield_per_epoch r513 into r514;\n    lt r511 r514 into r515;\n    ternary r515 r43.delegator r504.delegator into r516;\n    ternary r515 r43.validator r504.validator into r517;\n    ternary r515 r43.block_height r504.block_height into r518;\n    ternary r515 r43.bonded_microcredits r504.bonded_microcredits into r519;\n    ternary r515 r43.microcredits_yield_per_epoch r504.microcredits_yield_per_epoch into r520;\n    ternary r515 r43.commission r504.commission into r521;\n    ternary r515 r43.boost r504.boost into r522;\n    cast r516 r517 r518 r519 r520 r521 r522 into r523 as validator_datum;\n    ternary r515 r504.delegator r43.delegator into r524;\n    ternary r515 r504.validator r43.validator into r525;\n    ternary r515 r504.block_height r43.block_height into r526;\n    ternary r515 r504.bonded_microcredits r43.bonded_microcredits into r527;\n    ternary r515 r504.microcredits_yield_per_epoch r43.microcredits_yield_per_epoch into r528;\n    ternary r515 r504.commission r43.commission into r529;\n    ternary r515 r504.boost r43.boost into r530;\n    cast r524 r525 r526 r527 r528 r529 r530 into r531 as validator_datum;\n    ternary r508 r43.delegator r523.delegator into r532;\n    ternary r508 r43.validator r523.validator into r533;\n    ternary r508 r43.block_height r523.block_height into r534;\n    ternary r508 r43.bonded_microcredits r523.bonded_microcredits into r535;\n    ternary r508 r43.microcredits_yield_per_epoch r523.microcredits_yield_per_epoch into r536;\n    ternary r508 r43.commission r523.commission into r537;\n    ternary r508 r43.boost r523.boost into r538;\n    cast r532 r533 r534 r535 r536 r537 r538 into r539 as validator_datum;\n    ternary r508 r504.delegator r531.delegator into r540;\n    ternary r508 r504.validator r531.validator into r541;\n    ternary r508 r504.block_height r531.block_height into r542;\n    ternary r508 r504.bonded_microcredits r531.bonded_microcredits into r543;\n    ternary r508 r504.microcredits_yield_per_epoch r531.microcredits_yield_per_epoch into r544;\n    ternary r508 r504.commission r531.commission into r545;\n    ternary r508 r504.boost r531.boost into r546;\n    cast r540 r541 r542 r543 r544 r545 r546 into r547 as validator_datum;\n    ternary r507 r504.delegator r539.delegator into r548;\n    ternary r507 r504.validator r539.validator into r549;\n    ternary r507 r504.block_height r539.block_height into r550;\n    ternary r507 r504.bonded_microcredits r539.bonded_microcredits into r551;\n    ternary r507 r504.microcredits_yield_per_epoch r539.microcredits_yield_per_epoch into r552;\n    ternary r507 r504.commission r539.commission into r553;\n    ternary r507 r504.boost r539.boost into r554;\n    cast r548 r549 r550 r551 r552 r553 r554 into r555 as validator_datum;\n    ternary r507 r43.delegator r547.delegator into r556;\n    ternary r507 r43.validator r547.validator into r557;\n    ternary r507 r43.block_height r547.block_height into r558;\n    ternary r507 r43.bonded_microcredits r547.bonded_microcredits into r559;\n    ternary r507 r43.microcredits_yield_per_epoch r547.microcredits_yield_per_epoch into r560;\n    ternary r507 r43.commission r547.commission into r561;\n    ternary r507 r43.boost r547.boost into r562;\n    cast r556 r557 r558 r559 r560 r561 r562 into r563 as validator_datum;\n    ternary r506 r43.delegator r555.delegator into r564;\n    ternary r506 r43.validator r555.validator into r565;\n    ternary r506 r43.block_height r555.block_height into r566;\n    ternary r506 r43.bonded_microcredits r555.bonded_microcredits into r567;\n    ternary r506 r43.microcredits_yield_per_epoch r555.microcredits_yield_per_epoch into r568;\n    ternary r506 r43.commission r555.commission into r569;\n    ternary r506 r43.boost r555.boost into r570;\n    cast r564 r565 r566 r567 r568 r569 r570 into r571 as validator_datum;\n    ternary r506 r504.delegator r563.delegator into r572;\n    ternary r506 r504.validator r563.validator into r573;\n    ternary r506 r504.block_height r563.block_height into r574;\n    ternary r506 r504.bonded_microcredits r563.bonded_microcredits into r575;\n    ternary r506 r504.microcredits_yield_per_epoch r563.microcredits_yield_per_epoch into r576;\n    ternary r506 r504.commission r563.commission into r577;\n    ternary r506 r504.boost r563.boost into r578;\n    cast r572 r573 r574 r575 r576 r577 r578 into r579 as validator_datum;\n    ternary r505 r504.delegator r571.delegator into r580;\n    ternary r505 r504.validator r571.validator into r581;\n    ternary r505 r504.block_height r571.block_height into r582;\n    ternary r505 r504.bonded_microcredits r571.bonded_microcredits into r583;\n    ternary r505 r504.microcredits_yield_per_epoch r571.microcredits_yield_per_epoch into r584;\n    ternary r505 r504.commission r571.commission into r585;\n    ternary r505 r504.boost r571.boost into r586;\n    cast r580 r581 r582 r583 r584 r585 r586 into r587 as validator_datum;\n    ternary r505 r43.delegator r579.delegator into r588;\n    ternary r505 r43.validator r579.validator into r589;\n    ternary r505 r43.block_height r579.block_height into r590;\n    ternary r505 r43.bonded_microcredits r579.bonded_microcredits into r591;\n    ternary r505 r43.microcredits_yield_per_epoch r579.microcredits_yield_per_epoch into r592;\n    ternary r505 r43.commission r579.commission into r593;\n    ternary r505 r43.boost r579.boost into r594;\n    cast r588 r589 r590 r591 r592 r593 r594 into r595 as validator_datum;\n    lt r44.block_height r48 into r596;\n    lt r595.block_height r48 into r597;\n    is.eq r44.microcredits_yield_per_epoch 0u128 into r598;\n    is.eq r595.microcredits_yield_per_epoch 0u128 into r599;\n    mul r595.boost 10_000u128 into r600;\n    div r600 r49[6u32] into r601;\n    add r595.microcredits_yield_per_epoch r601 into r602;\n    mul r44.boost 10_000u128 into r603;\n    div r603 r49[6u32] into r604;\n    add r44.microcredits_yield_per_epoch r604 into r605;\n    lt r602 r605 into r606;\n    ternary r606 r44.delegator r595.delegator into r607;\n    ternary r606 r44.validator r595.validator into r608;\n    ternary r606 r44.block_height r595.block_height into r609;\n    ternary r606 r44.bonded_microcredits r595.bonded_microcredits into r610;\n    ternary r606 r44.microcredits_yield_per_epoch r595.microcredits_yield_per_epoch into r611;\n    ternary r606 r44.commission r595.commission into r612;\n    ternary r606 r44.boost r595.boost into r613;\n    cast r607 r608 r609 r610 r611 r612 r613 into r614 as validator_datum;\n    ternary r606 r595.delegator r44.delegator into r615;\n    ternary r606 r595.validator r44.validator into r616;\n    ternary r606 r595.block_height r44.block_height into r617;\n    ternary r606 r595.bonded_microcredits r44.bonded_microcredits into r618;\n    ternary r606 r595.microcredits_yield_per_epoch r44.microcredits_yield_per_epoch into r619;\n    ternary r606 r595.commission r44.commission into r620;\n    ternary r606 r595.boost r44.boost into r621;\n    cast r615 r616 r617 r618 r619 r620 r621 into r622 as validator_datum;\n    ternary r599 r44.delegator r614.delegator into r623;\n    ternary r599 r44.validator r614.validator into r624;\n    ternary r599 r44.block_height r614.block_height into r625;\n    ternary r599 r44.bonded_microcredits r614.bonded_microcredits into r626;\n    ternary r599 r44.microcredits_yield_per_epoch r614.microcredits_yield_per_epoch into r627;\n    ternary r599 r44.commission r614.commission into r628;\n    ternary r599 r44.boost r614.boost into r629;\n    cast r623 r624 r625 r626 r627 r628 r629 into r630 as validator_datum;\n    ternary r599 r595.delegator r622.delegator into r631;\n    ternary r599 r595.validator r622.validator into r632;\n    ternary r599 r595.block_height r622.block_height into r633;\n    ternary r599 r595.bonded_microcredits r622.bonded_microcredits into r634;\n    ternary r599 r595.microcredits_yield_per_epoch r622.microcredits_yield_per_epoch into r635;\n    ternary r599 r595.commission r622.commission into r636;\n    ternary r599 r595.boost r622.boost into r637;\n    cast r631 r632 r633 r634 r635 r636 r637 into r638 as validator_datum;\n    ternary r598 r595.delegator r630.delegator into r639;\n    ternary r598 r595.validator r630.validator into r640;\n    ternary r598 r595.block_height r630.block_height into r641;\n    ternary r598 r595.bonded_microcredits r630.bonded_microcredits into r642;\n    ternary r598 r595.microcredits_yield_per_epoch r630.microcredits_yield_per_epoch into r643;\n    ternary r598 r595.commission r630.commission into r644;\n    ternary r598 r595.boost r630.boost into r645;\n    cast r639 r640 r641 r642 r643 r644 r645 into r646 as validator_datum;\n    ternary r598 r44.delegator r638.delegator into r647;\n    ternary r598 r44.validator r638.validator into r648;\n    ternary r598 r44.block_height r638.block_height into r649;\n    ternary r598 r44.bonded_microcredits r638.bonded_microcredits into r650;\n    ternary r598 r44.microcredits_yield_per_epoch r638.microcredits_yield_per_epoch into r651;\n    ternary r598 r44.commission r638.commission into r652;\n    ternary r598 r44.boost r638.boost into r653;\n    cast r647 r648 r649 r650 r651 r652 r653 into r654 as validator_datum;\n    ternary r597 r44.delegator r646.delegator into r655;\n    ternary r597 r44.validator r646.validator into r656;\n    ternary r597 r44.block_height r646.block_height into r657;\n    ternary r597 r44.bonded_microcredits r646.bonded_microcredits into r658;\n    ternary r597 r44.microcredits_yield_per_epoch r646.microcredits_yield_per_epoch into r659;\n    ternary r597 r44.commission r646.commission into r660;\n    ternary r597 r44.boost r646.boost into r661;\n    cast r655 r656 r657 r658 r659 r660 r661 into r662 as validator_datum;\n    ternary r597 r595.delegator r654.delegator into r663;\n    ternary r597 r595.validator r654.validator into r664;\n    ternary r597 r595.block_height r654.block_height into r665;\n    ternary r597 r595.bonded_microcredits r654.bonded_microcredits into r666;\n    ternary r597 r595.microcredits_yield_per_epoch r654.microcredits_yield_per_epoch into r667;\n    ternary r597 r595.commission r654.commission into r668;\n    ternary r597 r595.boost r654.boost into r669;\n    cast r663 r664 r665 r666 r667 r668 r669 into r670 as validator_datum;\n    ternary r596 r595.delegator r662.delegator into r671;\n    ternary r596 r595.validator r662.validator into r672;\n    ternary r596 r595.block_height r662.block_height into r673;\n    ternary r596 r595.bonded_microcredits r662.bonded_microcredits into r674;\n    ternary r596 r595.microcredits_yield_per_epoch r662.microcredits_yield_per_epoch into r675;\n    ternary r596 r595.commission r662.commission into r676;\n    ternary r596 r595.boost r662.boost into r677;\n    cast r671 r672 r673 r674 r675 r676 r677 into r678 as validator_datum;\n    ternary r596 r44.delegator r670.delegator into r679;\n    ternary r596 r44.validator r670.validator into r680;\n    ternary r596 r44.block_height r670.block_height into r681;\n    ternary r596 r44.bonded_microcredits r670.bonded_microcredits into r682;\n    ternary r596 r44.microcredits_yield_per_epoch r670.microcredits_yield_per_epoch into r683;\n    ternary r596 r44.commission r670.commission into r684;\n    ternary r596 r44.boost r670.boost into r685;\n    cast r679 r680 r681 r682 r683 r684 r685 into r686 as validator_datum;\n    lt r45.block_height r48 into r687;\n    lt r686.block_height r48 into r688;\n    is.eq r45.microcredits_yield_per_epoch 0u128 into r689;\n    is.eq r686.microcredits_yield_per_epoch 0u128 into r690;\n    mul r686.boost 10_000u128 into r691;\n    div r691 r49[7u32] into r692;\n    add r686.microcredits_yield_per_epoch r692 into r693;\n    mul r45.boost 10_000u128 into r694;\n    div r694 r49[7u32] into r695;\n    add r45.microcredits_yield_per_epoch r695 into r696;\n    lt r693 r696 into r697;\n    ternary r697 r45.delegator r686.delegator into r698;\n    ternary r697 r45.validator r686.validator into r699;\n    ternary r697 r45.block_height r686.block_height into r700;\n    ternary r697 r45.bonded_microcredits r686.bonded_microcredits into r701;\n    ternary r697 r45.microcredits_yield_per_epoch r686.microcredits_yield_per_epoch into r702;\n    ternary r697 r45.commission r686.commission into r703;\n    ternary r697 r45.boost r686.boost into r704;\n    cast r698 r699 r700 r701 r702 r703 r704 into r705 as validator_datum;\n    ternary r697 r686.delegator r45.delegator into r706;\n    ternary r697 r686.validator r45.validator into r707;\n    ternary r697 r686.block_height r45.block_height into r708;\n    ternary r697 r686.bonded_microcredits r45.bonded_microcredits into r709;\n    ternary r697 r686.microcredits_yield_per_epoch r45.microcredits_yield_per_epoch into r710;\n    ternary r697 r686.commission r45.commission into r711;\n    ternary r697 r686.boost r45.boost into r712;\n    cast r706 r707 r708 r709 r710 r711 r712 into r713 as validator_datum;\n    ternary r690 r45.delegator r705.delegator into r714;\n    ternary r690 r45.validator r705.validator into r715;\n    ternary r690 r45.block_height r705.block_height into r716;\n    ternary r690 r45.bonded_microcredits r705.bonded_microcredits into r717;\n    ternary r690 r45.microcredits_yield_per_epoch r705.microcredits_yield_per_epoch into r718;\n    ternary r690 r45.commission r705.commission into r719;\n    ternary r690 r45.boost r705.boost into r720;\n    cast r714 r715 r716 r717 r718 r719 r720 into r721 as validator_datum;\n    ternary r690 r686.delegator r713.delegator into r722;\n    ternary r690 r686.validator r713.validator into r723;\n    ternary r690 r686.block_height r713.block_height into r724;\n    ternary r690 r686.bonded_microcredits r713.bonded_microcredits into r725;\n    ternary r690 r686.microcredits_yield_per_epoch r713.microcredits_yield_per_epoch into r726;\n    ternary r690 r686.commission r713.commission into r727;\n    ternary r690 r686.boost r713.boost into r728;\n    cast r722 r723 r724 r725 r726 r727 r728 into r729 as validator_datum;\n    ternary r689 r686.delegator r721.delegator into r730;\n    ternary r689 r686.validator r721.validator into r731;\n    ternary r689 r686.block_height r721.block_height into r732;\n    ternary r689 r686.bonded_microcredits r721.bonded_microcredits into r733;\n    ternary r689 r686.microcredits_yield_per_epoch r721.microcredits_yield_per_epoch into r734;\n    ternary r689 r686.commission r721.commission into r735;\n    ternary r689 r686.boost r721.boost into r736;\n    cast r730 r731 r732 r733 r734 r735 r736 into r737 as validator_datum;\n    ternary r689 r45.delegator r729.delegator into r738;\n    ternary r689 r45.validator r729.validator into r739;\n    ternary r689 r45.block_height r729.block_height into r740;\n    ternary r689 r45.bonded_microcredits r729.bonded_microcredits into r741;\n    ternary r689 r45.microcredits_yield_per_epoch r729.microcredits_yield_per_epoch into r742;\n    ternary r689 r45.commission r729.commission into r743;\n    ternary r689 r45.boost r729.boost into r744;\n    cast r738 r739 r740 r741 r742 r743 r744 into r745 as validator_datum;\n    ternary r688 r45.delegator r737.delegator into r746;\n    ternary r688 r45.validator r737.validator into r747;\n    ternary r688 r45.block_height r737.block_height into r748;\n    ternary r688 r45.bonded_microcredits r737.bonded_microcredits into r749;\n    ternary r688 r45.microcredits_yield_per_epoch r737.microcredits_yield_per_epoch into r750;\n    ternary r688 r45.commission r737.commission into r751;\n    ternary r688 r45.boost r737.boost into r752;\n    cast r746 r747 r748 r749 r750 r751 r752 into r753 as validator_datum;\n    ternary r688 r686.delegator r745.delegator into r754;\n    ternary r688 r686.validator r745.validator into r755;\n    ternary r688 r686.block_height r745.block_height into r756;\n    ternary r688 r686.bonded_microcredits r745.bonded_microcredits into r757;\n    ternary r688 r686.microcredits_yield_per_epoch r745.microcredits_yield_per_epoch into r758;\n    ternary r688 r686.commission r745.commission into r759;\n    ternary r688 r686.boost r745.boost into r760;\n    cast r754 r755 r756 r757 r758 r759 r760 into r761 as validator_datum;\n    ternary r687 r686.delegator r753.delegator into r762;\n    ternary r687 r686.validator r753.validator into r763;\n    ternary r687 r686.block_height r753.block_height into r764;\n    ternary r687 r686.bonded_microcredits r753.bonded_microcredits into r765;\n    ternary r687 r686.microcredits_yield_per_epoch r753.microcredits_yield_per_epoch into r766;\n    ternary r687 r686.commission r753.commission into r767;\n    ternary r687 r686.boost r753.boost into r768;\n    cast r762 r763 r764 r765 r766 r767 r768 into r769 as validator_datum;\n    ternary r687 r45.delegator r761.delegator into r770;\n    ternary r687 r45.validator r761.validator into r771;\n    ternary r687 r45.block_height r761.block_height into r772;\n    ternary r687 r45.bonded_microcredits r761.bonded_microcredits into r773;\n    ternary r687 r45.microcredits_yield_per_epoch r761.microcredits_yield_per_epoch into r774;\n    ternary r687 r45.commission r761.commission into r775;\n    ternary r687 r45.boost r761.boost into r776;\n    cast r770 r771 r772 r773 r774 r775 r776 into r777 as validator_datum;\n    lt r46.block_height r48 into r778;\n    lt r777.block_height r48 into r779;\n    is.eq r46.microcredits_yield_per_epoch 0u128 into r780;\n    is.eq r777.microcredits_yield_per_epoch 0u128 into r781;\n    mul r777.boost 10_000u128 into r782;\n    div r782 r49[8u32] into r783;\n    add r777.microcredits_yield_per_epoch r783 into r784;\n    mul r46.boost 10_000u128 into r785;\n    div r785 r49[8u32] into r786;\n    add r46.microcredits_yield_per_epoch r786 into r787;\n    lt r784 r787 into r788;\n    ternary r788 r46.delegator r777.delegator into r789;\n    ternary r788 r46.validator r777.validator into r790;\n    ternary r788 r46.block_height r777.block_height into r791;\n    ternary r788 r46.bonded_microcredits r777.bonded_microcredits into r792;\n    ternary r788 r46.microcredits_yield_per_epoch r777.microcredits_yield_per_epoch into r793;\n    ternary r788 r46.commission r777.commission into r794;\n    ternary r788 r46.boost r777.boost into r795;\n    cast r789 r790 r791 r792 r793 r794 r795 into r796 as validator_datum;\n    ternary r788 r777.delegator r46.delegator into r797;\n    ternary r788 r777.validator r46.validator into r798;\n    ternary r788 r777.block_height r46.block_height into r799;\n    ternary r788 r777.bonded_microcredits r46.bonded_microcredits into r800;\n    ternary r788 r777.microcredits_yield_per_epoch r46.microcredits_yield_per_epoch into r801;\n    ternary r788 r777.commission r46.commission into r802;\n    ternary r788 r777.boost r46.boost into r803;\n    cast r797 r798 r799 r800 r801 r802 r803 into r804 as validator_datum;\n    ternary r781 r46.delegator r796.delegator into r805;\n    ternary r781 r46.validator r796.validator into r806;\n    ternary r781 r46.block_height r796.block_height into r807;\n    ternary r781 r46.bonded_microcredits r796.bonded_microcredits into r808;\n    ternary r781 r46.microcredits_yield_per_epoch r796.microcredits_yield_per_epoch into r809;\n    ternary r781 r46.commission r796.commission into r810;\n    ternary r781 r46.boost r796.boost into r811;\n    cast r805 r806 r807 r808 r809 r810 r811 into r812 as validator_datum;\n    ternary r781 r777.delegator r804.delegator into r813;\n    ternary r781 r777.validator r804.validator into r814;\n    ternary r781 r777.block_height r804.block_height into r815;\n    ternary r781 r777.bonded_microcredits r804.bonded_microcredits into r816;\n    ternary r781 r777.microcredits_yield_per_epoch r804.microcredits_yield_per_epoch into r817;\n    ternary r781 r777.commission r804.commission into r818;\n    ternary r781 r777.boost r804.boost into r819;\n    cast r813 r814 r815 r816 r817 r818 r819 into r820 as validator_datum;\n    ternary r780 r777.delegator r812.delegator into r821;\n    ternary r780 r777.validator r812.validator into r822;\n    ternary r780 r777.block_height r812.block_height into r823;\n    ternary r780 r777.bonded_microcredits r812.bonded_microcredits into r824;\n    ternary r780 r777.microcredits_yield_per_epoch r812.microcredits_yield_per_epoch into r825;\n    ternary r780 r777.commission r812.commission into r826;\n    ternary r780 r777.boost r812.boost into r827;\n    cast r821 r822 r823 r824 r825 r826 r827 into r828 as validator_datum;\n    ternary r780 r46.delegator r820.delegator into r829;\n    ternary r780 r46.validator r820.validator into r830;\n    ternary r780 r46.block_height r820.block_height into r831;\n    ternary r780 r46.bonded_microcredits r820.bonded_microcredits into r832;\n    ternary r780 r46.microcredits_yield_per_epoch r820.microcredits_yield_per_epoch into r833;\n    ternary r780 r46.commission r820.commission into r834;\n    ternary r780 r46.boost r820.boost into r835;\n    cast r829 r830 r831 r832 r833 r834 r835 into r836 as validator_datum;\n    ternary r779 r46.delegator r828.delegator into r837;\n    ternary r779 r46.validator r828.validator into r838;\n    ternary r779 r46.block_height r828.block_height into r839;\n    ternary r779 r46.bonded_microcredits r828.bonded_microcredits into r840;\n    ternary r779 r46.microcredits_yield_per_epoch r828.microcredits_yield_per_epoch into r841;\n    ternary r779 r46.commission r828.commission into r842;\n    ternary r779 r46.boost r828.boost into r843;\n    cast r837 r838 r839 r840 r841 r842 r843 into r844 as validator_datum;\n    ternary r779 r777.delegator r836.delegator into r845;\n    ternary r779 r777.validator r836.validator into r846;\n    ternary r779 r777.block_height r836.block_height into r847;\n    ternary r779 r777.bonded_microcredits r836.bonded_microcredits into r848;\n    ternary r779 r777.microcredits_yield_per_epoch r836.microcredits_yield_per_epoch into r849;\n    ternary r779 r777.commission r836.commission into r850;\n    ternary r779 r777.boost r836.boost into r851;\n    cast r845 r846 r847 r848 r849 r850 r851 into r852 as validator_datum;\n    ternary r778 r777.delegator r844.delegator into r853;\n    ternary r778 r777.validator r844.validator into r854;\n    ternary r778 r777.block_height r844.block_height into r855;\n    ternary r778 r777.bonded_microcredits r844.bonded_microcredits into r856;\n    ternary r778 r777.microcredits_yield_per_epoch r844.microcredits_yield_per_epoch into r857;\n    ternary r778 r777.commission r844.commission into r858;\n    ternary r778 r777.boost r844.boost into r859;\n    cast r853 r854 r855 r856 r857 r858 r859 into r860 as validator_datum;\n    ternary r778 r46.delegator r852.delegator into r861;\n    ternary r778 r46.validator r852.validator into r862;\n    ternary r778 r46.block_height r852.block_height into r863;\n    ternary r778 r46.bonded_microcredits r852.bonded_microcredits into r864;\n    ternary r778 r46.microcredits_yield_per_epoch r852.microcredits_yield_per_epoch into r865;\n    ternary r778 r46.commission r852.commission into r866;\n    ternary r778 r46.boost r852.boost into r867;\n    cast r861 r862 r863 r864 r865 r866 r867 into r868 as validator_datum;\n    lt r47.block_height r48 into r869;\n    lt r868.block_height r48 into r870;\n    is.eq r47.microcredits_yield_per_epoch 0u128 into r871;\n    is.eq r868.microcredits_yield_per_epoch 0u128 into r872;\n    mul r868.boost 10_000u128 into r873;\n    div r873 r49[9u32] into r874;\n    add r868.microcredits_yield_per_epoch r874 into r875;\n    mul r47.boost 10_000u128 into r876;\n    div r876 r49[9u32] into r877;\n    add r47.microcredits_yield_per_epoch r877 into r878;\n    lt r875 r878 into r879;\n    ternary r879 r47.delegator r868.delegator into r880;\n    ternary r879 r47.validator r868.validator into r881;\n    ternary r879 r47.block_height r868.block_height into r882;\n    ternary r879 r47.bonded_microcredits r868.bonded_microcredits into r883;\n    ternary r879 r47.microcredits_yield_per_epoch r868.microcredits_yield_per_epoch into r884;\n    ternary r879 r47.commission r868.commission into r885;\n    ternary r879 r47.boost r868.boost into r886;\n    cast r880 r881 r882 r883 r884 r885 r886 into r887 as validator_datum;\n    ternary r879 r868.delegator r47.delegator into r888;\n    ternary r879 r868.validator r47.validator into r889;\n    ternary r879 r868.block_height r47.block_height into r890;\n    ternary r879 r868.bonded_microcredits r47.bonded_microcredits into r891;\n    ternary r879 r868.microcredits_yield_per_epoch r47.microcredits_yield_per_epoch into r892;\n    ternary r879 r868.commission r47.commission into r893;\n    ternary r879 r868.boost r47.boost into r894;\n    cast r888 r889 r890 r891 r892 r893 r894 into r895 as validator_datum;\n    ternary r872 r47.delegator r887.delegator into r896;\n    ternary r872 r47.validator r887.validator into r897;\n    ternary r872 r47.block_height r887.block_height into r898;\n    ternary r872 r47.bonded_microcredits r887.bonded_microcredits into r899;\n    ternary r872 r47.microcredits_yield_per_epoch r887.microcredits_yield_per_epoch into r900;\n    ternary r872 r47.commission r887.commission into r901;\n    ternary r872 r47.boost r887.boost into r902;\n    cast r896 r897 r898 r899 r900 r901 r902 into r903 as validator_datum;\n    ternary r872 r868.delegator r895.delegator into r904;\n    ternary r872 r868.validator r895.validator into r905;\n    ternary r872 r868.block_height r895.block_height into r906;\n    ternary r872 r868.bonded_microcredits r895.bonded_microcredits into r907;\n    ternary r872 r868.microcredits_yield_per_epoch r895.microcredits_yield_per_epoch into r908;\n    ternary r872 r868.commission r895.commission into r909;\n    ternary r872 r868.boost r895.boost into r910;\n    cast r904 r905 r906 r907 r908 r909 r910 into r911 as validator_datum;\n    ternary r871 r868.delegator r903.delegator into r912;\n    ternary r871 r868.validator r903.validator into r913;\n    ternary r871 r868.block_height r903.block_height into r914;\n    ternary r871 r868.bonded_microcredits r903.bonded_microcredits into r915;\n    ternary r871 r868.microcredits_yield_per_epoch r903.microcredits_yield_per_epoch into r916;\n    ternary r871 r868.commission r903.commission into r917;\n    ternary r871 r868.boost r903.boost into r918;\n    cast r912 r913 r914 r915 r916 r917 r918 into r919 as validator_datum;\n    ternary r871 r47.delegator r911.delegator into r920;\n    ternary r871 r47.validator r911.validator into r921;\n    ternary r871 r47.block_height r911.block_height into r922;\n    ternary r871 r47.bonded_microcredits r911.bonded_microcredits into r923;\n    ternary r871 r47.microcredits_yield_per_epoch r911.microcredits_yield_per_epoch into r924;\n    ternary r871 r47.commission r911.commission into r925;\n    ternary r871 r47.boost r911.boost into r926;\n    cast r920 r921 r922 r923 r924 r925 r926 into r927 as validator_datum;\n    ternary r870 r47.delegator r919.delegator into r928;\n    ternary r870 r47.validator r919.validator into r929;\n    ternary r870 r47.block_height r919.block_height into r930;\n    ternary r870 r47.bonded_microcredits r919.bonded_microcredits into r931;\n    ternary r870 r47.microcredits_yield_per_epoch r919.microcredits_yield_per_epoch into r932;\n    ternary r870 r47.commission r919.commission into r933;\n    ternary r870 r47.boost r919.boost into r934;\n    cast r928 r929 r930 r931 r932 r933 r934 into r935 as validator_datum;\n    ternary r870 r868.delegator r927.delegator into r936;\n    ternary r870 r868.validator r927.validator into r937;\n    ternary r870 r868.block_height r927.block_height into r938;\n    ternary r870 r868.bonded_microcredits r927.bonded_microcredits into r939;\n    ternary r870 r868.microcredits_yield_per_epoch r927.microcredits_yield_per_epoch into r940;\n    ternary r870 r868.commission r927.commission into r941;\n    ternary r870 r868.boost r927.boost into r942;\n    cast r936 r937 r938 r939 r940 r941 r942 into r943 as validator_datum;\n    ternary r869 r868.delegator r935.delegator into r944;\n    ternary r869 r868.validator r935.validator into r945;\n    ternary r869 r868.block_height r935.block_height into r946;\n    ternary r869 r868.bonded_microcredits r935.bonded_microcredits into r947;\n    ternary r869 r868.microcredits_yield_per_epoch r935.microcredits_yield_per_epoch into r948;\n    ternary r869 r868.commission r935.commission into r949;\n    ternary r869 r868.boost r935.boost into r950;\n    cast r944 r945 r946 r947 r948 r949 r950 into r951 as validator_datum;\n    ternary r869 r47.delegator r943.delegator into r952;\n    ternary r869 r47.validator r943.validator into r953;\n    ternary r869 r47.block_height r943.block_height into r954;\n    ternary r869 r47.bonded_microcredits r943.bonded_microcredits into r955;\n    ternary r869 r47.microcredits_yield_per_epoch r943.microcredits_yield_per_epoch into r956;\n    ternary r869 r47.commission r943.commission into r957;\n    ternary r869 r47.boost r943.boost into r958;\n    cast r952 r953 r954 r955 r956 r957 r958 into r959 as validator_datum;\n    cast  r132 r223 r314 r405 r496 r587 r678 r769 r860 r951 r959 into r960 as [validator_datum; 11u32];\n    is.eq r960[0u32].delegator r35.delegator into r961;\n    is.eq r960[0u32].validator r35.validator into r962;\n    or r961 r962 into r963;\n    cast 0u8 into r964 as i8;\n    add 0u8 1u8 into r965;\n    ternary r963 r964 11i8 into r966;\n    ternary r963 r965 0u8 into r967;\n    is.eq r960[1u32].delegator r35.delegator into r968;\n    is.eq r960[1u32].validator r35.validator into r969;\n    or r968 r969 into r970;\n    cast 1u8 into r971 as i8;\n    add r967 1u8 into r972;\n    ternary r970 r971 r966 into r973;\n    ternary r970 r972 r967 into r974;\n    is.eq r960[2u32].delegator r35.delegator into r975;\n    is.eq r960[2u32].validator r35.validator into r976;\n    or r975 r976 into r977;\n    cast 2u8 into r978 as i8;\n    add r974 1u8 into r979;\n    ternary r977 r978 r973 into r980;\n    ternary r977 r979 r974 into r981;\n    is.eq r960[3u32].delegator r35.delegator into r982;\n    is.eq r960[3u32].validator r35.validator into r983;\n    or r982 r983 into r984;\n    cast 3u8 into r985 as i8;\n    add r981 1u8 into r986;\n    ternary r984 r985 r980 into r987;\n    ternary r984 r986 r981 into r988;\n    is.eq r960[4u32].delegator r35.delegator into r989;\n    is.eq r960[4u32].validator r35.validator into r990;\n    or r989 r990 into r991;\n    cast 4u8 into r992 as i8;\n    add r988 1u8 into r993;\n    ternary r991 r992 r987 into r994;\n    ternary r991 r993 r988 into r995;\n    is.eq r960[5u32].delegator r35.delegator into r996;\n    is.eq r960[5u32].validator r35.validator into r997;\n    or r996 r997 into r998;\n    cast 5u8 into r999 as i8;\n    add r995 1u8 into r1000;\n    ternary r998 r999 r994 into r1001;\n    ternary r998 r1000 r995 into r1002;\n    is.eq r960[6u32].delegator r35.delegator into r1003;\n    is.eq r960[6u32].validator r35.validator into r1004;\n    or r1003 r1004 into r1005;\n    cast 6u8 into r1006 as i8;\n    add r1002 1u8 into r1007;\n    ternary r1005 r1006 r1001 into r1008;\n    ternary r1005 r1007 r1002 into r1009;\n    is.eq r960[7u32].delegator r35.delegator into r1010;\n    is.eq r960[7u32].validator r35.validator into r1011;\n    or r1010 r1011 into r1012;\n    cast 7u8 into r1013 as i8;\n    add r1009 1u8 into r1014;\n    ternary r1012 r1013 r1008 into r1015;\n    ternary r1012 r1014 r1009 into r1016;\n    is.eq r960[8u32].delegator r35.delegator into r1017;\n    is.eq r960[8u32].validator r35.validator into r1018;\n    or r1017 r1018 into r1019;\n    cast 8u8 into r1020 as i8;\n    add r1016 1u8 into r1021;\n    ternary r1019 r1020 r1015 into r1022;\n    ternary r1019 r1021 r1016 into r1023;\n    is.eq r960[9u32].delegator r35.delegator into r1024;\n    is.eq r960[9u32].validator r35.validator into r1025;\n    or r1024 r1025 into r1026;\n    cast 9u8 into r1027 as i8;\n    add r1023 1u8 into r1028;\n    ternary r1026 r1027 r1022 into r1029;\n    ternary r1026 r1028 r1023 into r1030;\n    gt r1030 1u8 into r1031;\n    ternary r1031 r1029 11i8 into r1032;\n    lt r1032 2i8 into r1033;\n    ternary r1033 r960[2u32].delegator r960[1u32].delegator into r1034;\n    lt r1032 3i8 into r1035;\n    ternary r1035 r960[3u32].delegator r960[2u32].delegator into r1036;\n    lt r1032 4i8 into r1037;\n    ternary r1037 r960[4u32].delegator r960[3u32].delegator into r1038;\n    lt r1032 5i8 into r1039;\n    ternary r1039 r960[5u32].delegator r960[4u32].delegator into r1040;\n    lt r1032 6i8 into r1041;\n    ternary r1041 r960[6u32].delegator r960[5u32].delegator into r1042;\n    lt r1032 7i8 into r1043;\n    ternary r1043 r960[7u32].delegator r960[6u32].delegator into r1044;\n    lt r1032 8i8 into r1045;\n    ternary r1045 r960[8u32].delegator r960[7u32].delegator into r1046;\n    lt r1032 9i8 into r1047;\n    ternary r1047 r960[9u32].delegator r960[8u32].delegator into r1048;\n    lt r1032 10i8 into r1049;\n    ternary r1049 r960[10u32].delegator r960[9u32].delegator into r1050;\n    cast  r960[0u32].delegator r1034 r1036 r1038 r1040 r1042 r1044 r1046 r1048 r1050 into r1051 as [address; 10u32];\n    set r1051 into top_validators[0u8];\n    set r35 into validator_data[r0];\n\n\n\n\n\n\nfunction remove_delegator:\n    async remove_delegator self.caller into r0;\n    output r0 as pondo_oraclev1.aleo/remove_delegator.future;\n\nfinalize remove_delegator:\n    input r0 as address.public;\n    rem block.height 120_960u32 into r1;\n    lt r1 103_680u32 into r2;\n    assert.eq r2 true;\n    contains delegator_to_validator[r0] into r3;\n    branch.eq r3 false to end_then_0_0;\n    remove delegator_to_validator[r0];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n    contains validator_data[r0] into r4;\n    branch.eq r4 false to end_then_0_2;\n    remove validator_data[r0];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    position end_otherwise_0_3;\n    get top_validators[0u8] into r5;\n    is.eq r5[0u32] r0 into r6;\n    ternary r6 pondo_oraclev1.aleo r5[0u32] into r7;\n    is.eq r5[1u32] r0 into r8;\n    ternary r8 pondo_oraclev1.aleo r5[1u32] into r9;\n    is.eq r5[2u32] r0 into r10;\n    ternary r10 pondo_oraclev1.aleo r5[2u32] into r11;\n    is.eq r5[3u32] r0 into r12;\n    ternary r12 pondo_oraclev1.aleo r5[3u32] into r13;\n    is.eq r5[4u32] r0 into r14;\n    ternary r14 pondo_oraclev1.aleo r5[4u32] into r15;\n    is.eq r5[5u32] r0 into r16;\n    ternary r16 pondo_oraclev1.aleo r5[5u32] into r17;\n    is.eq r5[6u32] r0 into r18;\n    ternary r18 pondo_oraclev1.aleo r5[6u32] into r19;\n    is.eq r5[7u32] r0 into r20;\n    ternary r20 pondo_oraclev1.aleo r5[7u32] into r21;\n    is.eq r5[8u32] r0 into r22;\n    ternary r22 pondo_oraclev1.aleo r5[8u32] into r23;\n    is.eq r5[9u32] r0 into r24;\n    ternary r24 pondo_oraclev1.aleo r5[9u32] into r25;\n    is.eq r7 pondo_oraclev1.aleo into r26;\n    ternary r26 r9 r7 into r27;\n    ternary r26 r7 r9 into r28;\n    is.eq r28 pondo_oraclev1.aleo into r29;\n    ternary r29 r11 r28 into r30;\n    ternary r29 r28 r11 into r31;\n    is.eq r31 pondo_oraclev1.aleo into r32;\n    ternary r32 r13 r31 into r33;\n    ternary r32 r31 r13 into r34;\n    is.eq r34 pondo_oraclev1.aleo into r35;\n    ternary r35 r15 r34 into r36;\n    ternary r35 r34 r15 into r37;\n    is.eq r37 pondo_oraclev1.aleo into r38;\n    ternary r38 r17 r37 into r39;\n    ternary r38 r37 r17 into r40;\n    is.eq r40 pondo_oraclev1.aleo into r41;\n    ternary r41 r19 r40 into r42;\n    ternary r41 r40 r19 into r43;\n    is.eq r43 pondo_oraclev1.aleo into r44;\n    ternary r44 r21 r43 into r45;\n    ternary r44 r43 r21 into r46;\n    is.eq r46 pondo_oraclev1.aleo into r47;\n    ternary r47 r23 r46 into r48;\n    ternary r47 r46 r23 into r49;\n    is.eq r49 pondo_oraclev1.aleo into r50;\n    ternary r50 r25 r49 into r51;\n    ternary r50 r49 r25 into r52;\n    cast  r27 r30 r33 r36 r39 r42 r45 r48 r51 r52 into r53 as [address; 10u32];\n    set r53 into top_validators[0u8];\n\n\n\n\nfunction pondo_ban_validator:\n    input r0 as address.public;\n    assert.neq r0 pondo_oraclev1.aleo;\n    async pondo_ban_validator r0 self.caller into r1;\n    output r1 as pondo_oraclev1.aleo/pondo_ban_validator.future;\n\nfinalize pondo_ban_validator:\n    input r0 as address.public;\n    input r1 as address.public;\n    get control_addresses[r1] into r2;\n    not r2 into r3;\n    assert.eq r3 true;\n    set true into banned_validators[r0];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    async ban_validator r0 into r1;\n    output r1 as pondo_oraclev1.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    get validator_data[r0] into r1;\n    rem block.height 120_960u32 into r2;\n    gte r2 17_280u32 into r3;\n    assert.eq r3 true;\n    add 50u8 1u8 into r4;\n    cast false r4 into r5 as committee_state;\n    get.or_use credits.aleo/committee[r1.validator] r5 into r6;\n    not r6.is_open into r7;\n    gt r6.commission 50u8 into r8;\n    or r7 r8 into r9;\n    assert.eq r9 true;\n    set true into banned_validators[r1.validator];\n\n\n\n\nfunction unban_validator:\n    input r0 as address.public;\n    input r1 as signature.public;\n    input r2 as address.public;\n    input r3 as signature.public;\n    input r4 as address.public;\n    input r5 as signature.public;\n    input r6 as address.public;\n    input r7 as u64.public;\n    hash.bhp256 r0 into r8 as field;\n    cast r8 5u8 r7 into r9 as admin_operation;\n    hash.bhp256 r9 into r10 as field;\n    sign.verify r1 r2 r10 into r11;\n    sign.verify r3 r4 r10 into r12;\n    sign.verify r5 r6 r10 into r13;\n    and r11 r12 into r14;\n    and r14 r13 into r15;\n    assert.eq r15 true;\n    assert.neq r2 r4;\n    assert.neq r2 r6;\n    assert.neq r4 r6;\n    async unban_validator r0 r2 r4 r6 r9 into r16;\n    output r16 as pondo_oraclev1.aleo/unban_validator.future;\n\nfinalize unban_validator:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as address.public;\n    input r4 as admin_operation.public;\n    get control_addresses[r1] into r5;\n    get control_addresses[r2] into r6;\n    get control_addresses[r3] into r7;\n    and r5 r6 into r8;\n    and r8 r7 into r9;\n    assert.eq r9 true;\n    contains admin_operations[r4.request_id] into r10;\n    assert.eq r10 false;\n    set r4 into admin_operations[r4.request_id];\n    remove banned_validators[r0];\n\n\n\n\nfunction set_pondo_tvl:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async set_pondo_tvl r0 into r1;\n    output r1 as pondo_oraclev1.aleo/set_pondo_tvl.future;\n\nfinalize set_pondo_tvl:\n    input r0 as u64.public;\n    set r0 into pondo_tvl[0u8];\n\n\n\n\nfunction ban_self:\n    input r0 as address.private;\n    async ban_self r0 self.caller into r1;\n    output r1 as pondo_oraclev1.aleo/ban_self.future;\n\nfinalize ban_self:\n    input r0 as address.public;\n    input r1 as address.public;\n    get credits.aleo/withdraw[r0] into r2;\n    assert.eq r2 r1;\n    contains credits.aleo/committee[r0] into r3;\n    assert.eq r3 true;\n    set true into banned_validators[r0];\n\n\n\n\nfunction boost_validator:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/transfer_public_as_signer pondo_core_protocolv1.aleo r1 into r2;\n    async boost_validator r2 r0 r1 into r3;\n    output r3 as pondo_oraclev1.aleo/boost_validator.future;\n\nfinalize boost_validator:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as address.public;\n    input r2 as u64.public;\n    await r0;\n    div block.height 120_960u32 into r3;\n    rem block.height 120_960u32 into r4;\n    gte r4 103_680u32 into r5;\n    not r5 into r6;\n    assert.eq r6 true;\n    cast 0u32 0u64 into r7 as validator_boost;\n    get.or_use validator_boosting[r1] r7 into r8;\n    is.eq r8.epoch r3 into r9;\n    add r8.boost_amount r2 into r10;\n    ternary r9 r10 r2 into r11;\n    cast r3 r11 into r12 as validator_boost;\n    set r12 into validator_boosting[r1];\n\n",
  "pondo_staked_aleo_tokenv1.aleo": "import credits.aleo;\nimport multi_token_support_programv1.aleo;\nprogram pondo_staked_aleo_tokenv1.aleo;\n\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\n\n\n\nfunction register_token:\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    call multi_token_support_programv1.aleo/register_token 1751493913335802797273486270793650302076377624243810059080883537084141842600field 1631421259099656974472467909989204u128 482131854671u128 6u8 1_000_000_000_000_000u128 false pondo_staked_aleo_tokenv1.aleo into r0;\n    call multi_token_support_programv1.aleo/set_role 1751493913335802797273486270793650302076377624243810059080883537084141842600field pondo_core_protocolv1.aleo 3u8 into r1;\n    async register_token r0 r1 into r2;\n    output r2 as pondo_staked_aleo_tokenv1.aleo/register_token.future;\n\nfinalize register_token:\n    input r0 as multi_token_support_programv1.aleo/register_token.future;\n    input r1 as multi_token_support_programv1.aleo/set_role.future;\n    await r0;\n    await r1;\n\n",
  "pondo_tokenv1.aleo": "import credits.aleo;\nimport multi_token_support_programv1.aleo;\nprogram pondo_tokenv1.aleo;\n\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\nstruct Balance:\n    token_id as field;\n    account as address;\n    balance as u128;\n    authorized_until as u32;\n\n\n\nmapping has_minted:\n\tkey as u8.public;\n\tvalue as boolean.public;\n\n\nfunction mint_public:\n    assert.eq self.caller aleo1hmrpe0ts2khluprhex3y46cqqy44pme7lwc40ls9nexftx0xhu8sxxpnd0;\n    call multi_token_support_programv1.aleo/mint_public 1751493913335802797273486270793650302076377624243810059080883537084141842601field aleo1hmrpe0ts2khluprhex3y46cqqy44pme7lwc40ls9nexftx0xhu8sxxpnd0 1_000_000_000_000_000u128 4294967295u32 into r0;\n    async mint_public r0 into r1;\n    output r1 as pondo_tokenv1.aleo/mint_public.future;\n\nfinalize mint_public:\n    input r0 as multi_token_support_programv1.aleo/mint_public.future;\n    await r0;\n    contains has_minted[0u8] into r1;\n    not r1 into r2;\n    assert.eq r2 true;\n    set true into has_minted[0u8];\n\n\n\n\nfunction burn_public:\n    input r0 as address.public;\n    input r1 as u128.public;\n    input r2 as u128.public;\n    gt r1 0u128 into r3;\n    assert.eq r3 true;\n    gt r2 0u128 into r4;\n    assert.eq r4 true;\n    is.eq self.signer r0 into r5;\n    is.eq self.caller r0 into r6;\n    or r5 r6 into r7;\n    assert.eq r7 true;\n    call multi_token_support_programv1.aleo/burn_public 1751493913335802797273486270793650302076377624243810059080883537084141842601field r0 r1 into r8;\n    call multi_token_support_programv1.aleo/transfer_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field r0 r2 into r9;\n    async burn_public r8 r9 r1 r2 into r10;\n    output r10 as pondo_tokenv1.aleo/burn_public.future;\n\nfinalize burn_public:\n    input r0 as multi_token_support_programv1.aleo/burn_public.future;\n    input r1 as multi_token_support_programv1.aleo/transfer_public.future;\n    input r2 as u128.public;\n    input r3 as u128.public;\n    await r0;\n    await r1;\n    get multi_token_support_programv1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842601field] into r4;\n    cast pondo_tokenv1.aleo 1751493913335802797273486270793650302076377624243810059080883537084141842600field into r5 as TokenOwner;\n    hash.bhp256 r5 into r6 as field;\n    get multi_token_support_programv1.aleo/authorized_balances[r6] into r7;\n    mul r4.supply 1_000_000u128 into r8;\n    div r8 r7.balance into r9;\n    mul r2 1_000_000u128 into r10;\n    div r10 r3 into r11;\n    lte r9 r11 into r12;\n    assert.eq r12 true;\n\n\n\n\nfunction initialize_token:\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    call multi_token_support_programv1.aleo/register_token 1751493913335802797273486270793650302076377624243810059080883537084141842601field 97240284627655645872219502u128 1347306575u128 6u8 1_000_000_000_000_000u128 false pondo_tokenv1.aleo into r0;\n    async initialize_token r0 into r1;\n    output r1 as pondo_tokenv1.aleo/initialize_token.future;\n\nfinalize initialize_token:\n    input r0 as multi_token_support_programv1.aleo/register_token.future;\n    await r0;\n\n",
  "reference_delegator.aleo": "import credits.aleo;\nimport pondo_oraclev1.aleo;\nprogram reference_delegator.aleo;\n\n\nstruct admin_operation:\n    arg as field;\n    op_type as u8;\n    request_id as u64;\n\n\nmapping initialized:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nfunction initialize:\n    assert.eq self.caller aleo12shtwnmf49t5atmad2jnk3e58ahtp749d9trctt9z3wryxyzt5pspp0nd0;\n    call credits.aleo/transfer_public_as_signer reference_delegator.aleo 10_000_000_000u64 into r0;\n    call credits.aleo/bond_public aleo1j0zju7f0fpgv98gulyywtkxk6jca99l6425uqhnd5kccu4jc2grstjx0mt reference_delegator.aleo 10_000_000_000u64 into r1;\n    call pondo_oraclev1.aleo/propose_delegator aleo1j0zju7f0fpgv98gulyywtkxk6jca99l6425uqhnd5kccu4jc2grstjx0mt into r2;\n    async initialize r0 r1 r2 into r3;\n    output r3 as reference_delegator.aleo/initialize.future;\n\nfinalize initialize:\n    input r0 as credits.aleo/transfer_public_as_signer.future;\n    input r1 as credits.aleo/bond_public.future;\n    input r2 as pondo_oraclev1.aleo/propose_delegator.future;\n    await r0;\n    await r1;\n    await r2;\n    contains initialized[0u8] into r3;\n    assert.eq r3 false;\n    set 8u8 into initialized[0u8];\n\n\n\n\nfunction remove:\n    input r0 as u64.public;\n    assert.eq self.caller aleo12shtwnmf49t5atmad2jnk3e58ahtp749d9trctt9z3wryxyzt5pspp0nd0;\n    call credits.aleo/unbond_public reference_delegator.aleo r0 into r1;\n    call pondo_oraclev1.aleo/remove_delegator into r2;\n    async remove r1 r2 into r3;\n    output r3 as reference_delegator.aleo/remove.future;\n\nfinalize remove:\n    input r0 as credits.aleo/unbond_public.future;\n    input r1 as pondo_oraclev1.aleo/remove_delegator.future;\n    await r0;\n    await r1;\n    contains credits.aleo/bonded[reference_delegator.aleo] into r2;\n    assert.eq r2 false;\n\n\n\n\nfunction withdraw:\n    input r0 as u64.private;\n    call credits.aleo/transfer_public aleo12shtwnmf49t5atmad2jnk3e58ahtp749d9trctt9z3wryxyzt5pspp0nd0 r0 into r1;\n    async withdraw r1 into r2;\n    output r2 as reference_delegator.aleo/withdraw.future;\n\nfinalize withdraw:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get.or_use credits.aleo/account[reference_delegator.aleo] 0u64 into r1;\n    assert.eq r1 0u64;\n\n",
  "pondo_delegator1v1.aleo": "import credits.aleo;\nimport pondo_oraclev1.aleo;\nprogram pondo_delegator1v1.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct admin_operation:\n    arg as field;\n    op_type as u8;\n    request_id as u64;\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator1v1.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oraclev1.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator1v1.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oraclev1.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator1v1.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 3u8 into r1;\n    assert.eq r1 true;\n    is.eq r0 1u8 into r2;\n    branch.eq r2 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n    is.eq r0 0u8 into r3;\n    branch.eq r3 false to end_then_0_2;\n    set 4u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    position end_otherwise_0_3;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async set_validator r0 r1 into r2;\n    output r2 as pondo_delegator1v1.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator1v1.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator1v1.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator1v1.aleo] into r3;\n    lt r3 1_000_000u64 into r4;\n    assert.eq r4 true;\n    get state_mapping[0u8] into r5;\n    is.eq r5 0u8 into r6;\n    is.eq r5 1u8 into r7;\n    or r6 r7 into r8;\n    assert.eq r8 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator1v1.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator1v1.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator1v1.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_4;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_5;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator1v1.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator1v1.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator1v1.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_6;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    call credits.aleo/transfer_public pondo_core_protocolv1.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator1v1.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator1v1.aleo] into r1;\n    lt r1 1_000_000u64 into r2;\n    assert.eq r2 true;\n    get state_mapping[0u8] into r3;\n    assert.eq r3 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator1v1.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    get validator_mapping[0u8] into r0;\n    get credits.aleo/committee[r0.validator] into r1;\n    is.eq r1.is_open false into r2;\n    assert.eq r2 true;\n    get state_mapping[0u8] into r3;\n    is.eq r3 0u8 into r4;\n    assert.eq r4 true;\n    set 4u8 into state_mapping[0u8];\n    set true into banned_validators[r0.validator];\n\n",
  "pondo_delegator2v1.aleo": "import credits.aleo;\nimport pondo_oraclev1.aleo;\nprogram pondo_delegator2v1.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct admin_operation:\n    arg as field;\n    op_type as u8;\n    request_id as u64;\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator2v1.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oraclev1.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator2v1.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oraclev1.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator2v1.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 3u8 into r1;\n    assert.eq r1 true;\n    is.eq r0 1u8 into r2;\n    branch.eq r2 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n    is.eq r0 0u8 into r3;\n    branch.eq r3 false to end_then_0_2;\n    set 4u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    position end_otherwise_0_3;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async set_validator r0 r1 into r2;\n    output r2 as pondo_delegator2v1.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator2v1.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator2v1.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator2v1.aleo] into r3;\n    lt r3 1_000_000u64 into r4;\n    assert.eq r4 true;\n    get state_mapping[0u8] into r5;\n    is.eq r5 0u8 into r6;\n    is.eq r5 1u8 into r7;\n    or r6 r7 into r8;\n    assert.eq r8 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator2v1.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator2v1.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator2v1.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_4;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_5;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator2v1.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator2v1.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator2v1.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_6;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    call credits.aleo/transfer_public pondo_core_protocolv1.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator2v1.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator2v1.aleo] into r1;\n    lt r1 1_000_000u64 into r2;\n    assert.eq r2 true;\n    get state_mapping[0u8] into r3;\n    assert.eq r3 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator2v1.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    get validator_mapping[0u8] into r0;\n    get credits.aleo/committee[r0.validator] into r1;\n    is.eq r1.is_open false into r2;\n    assert.eq r2 true;\n    get state_mapping[0u8] into r3;\n    is.eq r3 0u8 into r4;\n    assert.eq r4 true;\n    set 4u8 into state_mapping[0u8];\n    set true into banned_validators[r0.validator];\n\n",
  "pondo_delegator3v1.aleo": "import credits.aleo;\nimport pondo_oraclev1.aleo;\nprogram pondo_delegator3v1.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct admin_operation:\n    arg as field;\n    op_type as u8;\n    request_id as u64;\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator3v1.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oraclev1.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator3v1.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oraclev1.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator3v1.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 3u8 into r1;\n    assert.eq r1 true;\n    is.eq r0 1u8 into r2;\n    branch.eq r2 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n    is.eq r0 0u8 into r3;\n    branch.eq r3 false to end_then_0_2;\n    set 4u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    position end_otherwise_0_3;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async set_validator r0 r1 into r2;\n    output r2 as pondo_delegator3v1.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator3v1.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator3v1.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator3v1.aleo] into r3;\n    lt r3 1_000_000u64 into r4;\n    assert.eq r4 true;\n    get state_mapping[0u8] into r5;\n    is.eq r5 0u8 into r6;\n    is.eq r5 1u8 into r7;\n    or r6 r7 into r8;\n    assert.eq r8 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator3v1.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator3v1.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator3v1.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_4;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_5;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator3v1.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator3v1.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator3v1.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_6;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    call credits.aleo/transfer_public pondo_core_protocolv1.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator3v1.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator3v1.aleo] into r1;\n    lt r1 1_000_000u64 into r2;\n    assert.eq r2 true;\n    get state_mapping[0u8] into r3;\n    assert.eq r3 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator3v1.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    get validator_mapping[0u8] into r0;\n    get credits.aleo/committee[r0.validator] into r1;\n    is.eq r1.is_open false into r2;\n    assert.eq r2 true;\n    get state_mapping[0u8] into r3;\n    is.eq r3 0u8 into r4;\n    assert.eq r4 true;\n    set 4u8 into state_mapping[0u8];\n    set true into banned_validators[r0.validator];\n\n",
  "pondo_delegator4v1.aleo": "import credits.aleo;\nimport pondo_oraclev1.aleo;\nprogram pondo_delegator4v1.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct admin_operation:\n    arg as field;\n    op_type as u8;\n    request_id as u64;\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator4v1.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oraclev1.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator4v1.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oraclev1.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator4v1.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 3u8 into r1;\n    assert.eq r1 true;\n    is.eq r0 1u8 into r2;\n    branch.eq r2 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n    is.eq r0 0u8 into r3;\n    branch.eq r3 false to end_then_0_2;\n    set 4u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    position end_otherwise_0_3;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async set_validator r0 r1 into r2;\n    output r2 as pondo_delegator4v1.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator4v1.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator4v1.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator4v1.aleo] into r3;\n    lt r3 1_000_000u64 into r4;\n    assert.eq r4 true;\n    get state_mapping[0u8] into r5;\n    is.eq r5 0u8 into r6;\n    is.eq r5 1u8 into r7;\n    or r6 r7 into r8;\n    assert.eq r8 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator4v1.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator4v1.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator4v1.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_4;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_5;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator4v1.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator4v1.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator4v1.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_6;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    call credits.aleo/transfer_public pondo_core_protocolv1.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator4v1.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator4v1.aleo] into r1;\n    lt r1 1_000_000u64 into r2;\n    assert.eq r2 true;\n    get state_mapping[0u8] into r3;\n    assert.eq r3 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator4v1.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    get validator_mapping[0u8] into r0;\n    get credits.aleo/committee[r0.validator] into r1;\n    is.eq r1.is_open false into r2;\n    assert.eq r2 true;\n    get state_mapping[0u8] into r3;\n    is.eq r3 0u8 into r4;\n    assert.eq r4 true;\n    set 4u8 into state_mapping[0u8];\n    set true into banned_validators[r0.validator];\n\n",
  "pondo_delegator5v1.aleo": "import credits.aleo;\nimport pondo_oraclev1.aleo;\nprogram pondo_delegator5v1.aleo;\n\nstruct committee_state:\n    is_open as boolean;\n    commission as u8;\n\n\nstruct admin_operation:\n    arg as field;\n    op_type as u8;\n    request_id as u64;\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\nmapping state_mapping:\n\tkey as u8.public;\n\tvalue as u8.public;\n\n\nmapping validator_mapping:\n\tkey as u8.public;\n\tvalue as validator_state.public;\n\n\nmapping banned_validators:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nfunction initialize:\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async initialize into r0;\n    output r0 as pondo_delegator5v1.aleo/initialize.future;\n\nfinalize initialize:\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction ban_validator:\n    input r0 as address.public;\n    call pondo_oraclev1.aleo/pondo_ban_validator r0 into r1;\n    async ban_validator r0 r1 into r2;\n    output r2 as pondo_delegator5v1.aleo/ban_validator.future;\n\nfinalize ban_validator:\n    input r0 as address.public;\n    input r1 as pondo_oraclev1.aleo/pondo_ban_validator.future;\n    await r1;\n    contains banned_validators[r0] into r2;\n    assert.eq r2 true;\n\n\n\n\nfunction prep_rebalance:\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async prep_rebalance into r0;\n    output r0 as pondo_delegator5v1.aleo/prep_rebalance.future;\n\nfinalize prep_rebalance:\n    get state_mapping[0u8] into r0;\n    is.neq r0 3u8 into r1;\n    assert.eq r1 true;\n    is.eq r0 1u8 into r2;\n    branch.eq r2 false to end_then_0_0;\n    set 2u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_1;\n    position end_then_0_0;\n    position end_otherwise_0_1;\n    is.eq r0 0u8 into r3;\n    branch.eq r3 false to end_then_0_2;\n    set 4u8 into state_mapping[0u8];\n    branch.eq true true to end_otherwise_0_3;\n    position end_then_0_2;\n    position end_otherwise_0_3;\n\n\n\n\nfunction set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    async set_validator r0 r1 into r2;\n    output r2 as pondo_delegator5v1.aleo/set_validator.future;\n\nfinalize set_validator:\n    input r0 as address.public;\n    input r1 as u8.public;\n    cast r0 r1 into r2 as validator_state;\n    set r2 into validator_mapping[0u8];\n    get state_mapping[0u8] into r3;\n    is.eq r3 4u8 into r4;\n    assert.eq r4 true;\n    set 0u8 into state_mapping[0u8];\n\n\n\n\nfunction bond:\n    input r0 as address.public;\n    input r1 as u64.public;\n    call credits.aleo/bond_public r0 pondo_delegator5v1.aleo r1 into r2;\n    async bond r0 r2 into r3;\n    output r3 as pondo_delegator5v1.aleo/bond.future;\n\nfinalize bond:\n    input r0 as address.public;\n    input r1 as credits.aleo/bond_public.future;\n    await r1;\n    get validator_mapping[0u8] into r2;\n    assert.eq r0 r2.validator;\n    get credits.aleo/account[pondo_delegator5v1.aleo] into r3;\n    lt r3 1_000_000u64 into r4;\n    assert.eq r4 true;\n    get state_mapping[0u8] into r5;\n    is.eq r5 0u8 into r6;\n    is.eq r5 1u8 into r7;\n    or r6 r7 into r8;\n    assert.eq r8 true;\n    set 1u8 into state_mapping[0u8];\n\n\n\n\nfunction unbond:\n    input r0 as u64.public;\n    call credits.aleo/unbond_public pondo_delegator5v1.aleo r0 into r1;\n    async unbond r1 into r2;\n    output r2 as pondo_delegator5v1.aleo/unbond.future;\n\nfinalize unbond:\n    input r0 as credits.aleo/unbond_public.future;\n    await r0;\n    contains credits.aleo/bonded[pondo_delegator5v1.aleo] into r1;\n    assert.eq r1 false;\n    get validator_mapping[0u8] into r2;\n    cast true 0u8 into r3 as committee_state;\n    get.or_use credits.aleo/committee[r2.validator] r3 into r4;\n    add r2.commission 10u8 into r5;\n    gt r4.commission r5 into r6;\n    gt r4.commission 50u8 into r7;\n    or r6 r7 into r8;\n    branch.eq r8 false to end_then_0_4;\n    set true into banned_validators[r2.validator];\n    branch.eq true true to end_otherwise_0_5;\n    position end_then_0_4;\n    get state_mapping[0u8] into r9;\n    assert.eq r9 2u8;\n    position end_otherwise_0_5;\n    set 3u8 into state_mapping[0u8];\n\n\n\n\nfunction terminal_state:\n    async terminal_state into r0;\n    output r0 as pondo_delegator5v1.aleo/terminal_state.future;\n\nfinalize terminal_state:\n    contains credits.aleo/bonded[pondo_delegator5v1.aleo] into r0;\n    assert.eq r0 false;\n    contains credits.aleo/unbonding[pondo_delegator5v1.aleo] into r1;\n    assert.eq r1 false;\n    get state_mapping[0u8] into r2;\n    is.neq r2 0u8 into r3;\n    assert.eq r3 true;\n    is.eq r2 1u8 into r4;\n    branch.eq r4 false to end_then_0_6;\n    get validator_mapping[0u8] into r5;\n    set true into banned_validators[r5.validator];\n    branch.eq true true to end_otherwise_0_7;\n    position end_then_0_6;\n    position end_otherwise_0_7;\n    set 4u8 into state_mapping[0u8];\n\n\n\n\nfunction transfer_to_core_protocol:\n    input r0 as u64.public;\n    assert.eq self.caller pondo_core_protocolv1.aleo;\n    call credits.aleo/transfer_public pondo_core_protocolv1.aleo r0 into r1;\n    async transfer_to_core_protocol r1 into r2;\n    output r2 as pondo_delegator5v1.aleo/transfer_to_core_protocol.future;\n\nfinalize transfer_to_core_protocol:\n    input r0 as credits.aleo/transfer_public.future;\n    await r0;\n    get credits.aleo/account[pondo_delegator5v1.aleo] into r1;\n    lt r1 1_000_000u64 into r2;\n    assert.eq r2 true;\n    get state_mapping[0u8] into r3;\n    assert.eq r3 4u8;\n\n\n\n\nfunction bond_failed:\n    async bond_failed into r0;\n    output r0 as pondo_delegator5v1.aleo/bond_failed.future;\n\nfinalize bond_failed:\n    get validator_mapping[0u8] into r0;\n    get credits.aleo/committee[r0.validator] into r1;\n    is.eq r1.is_open false into r2;\n    assert.eq r2 true;\n    get state_mapping[0u8] into r3;\n    is.eq r3 0u8 into r4;\n    assert.eq r4 true;\n    set 4u8 into state_mapping[0u8];\n    set true into banned_validators[r0.validator];\n\n",
  "grant_disbursement.aleo": "import credits.aleo;\nimport multi_token_support_programv1.aleo;\nimport mtsp_creditsv1.aleo;\nimport pondo_oraclev1.aleo;\nimport pondo_staked_aleo_tokenv1.aleo;\nimport pondo_tokenv1.aleo;\nimport pondo_delegator1v1.aleo;\nimport pondo_delegator2v1.aleo;\nimport pondo_delegator3v1.aleo;\nimport pondo_delegator4v1.aleo;\nimport pondo_delegator5v1.aleo;\nimport pondo_core_protocolv1.aleo;\nprogram grant_disbursement.aleo;\n\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\n\nstruct admin_operation:\n    arg as field;\n    op_type as u8;\n    request_id as u64;\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\nstruct Grant:\n    credits_amount as u64;\n    paleo_amount as u64;\n    recipient_rewards_key as address;\n    recipient_principal_key as address;\n    start_timestamp as u64;\n    cliff_timestamp as u64;\n    fully_vested_timestamp as u64;\n\n\nmapping timestamp:\n\tkey as u8.public;\n\tvalue as u64.public;\n\n\nmapping admin_operations:\n\tkey as u64.public;\n\tvalue as admin_operation.public;\n\n\nmapping admins:\n\tkey as address.public;\n\tvalue as boolean.public;\n\n\nmapping grants:\n\tkey as u64.public;\n\tvalue as Grant.public;\n\n\nfunction initialize:\n    async initialize into r0;\n    output r0 as grant_disbursement.aleo/initialize.future;\n\nfinalize initialize:\n    contains timestamp[0u8] into r0;\n    not r0 into r1;\n    assert.eq r1 true;\n    set 0u64 into timestamp[0u8];\n    set true into admins[aleo12shtwnmf49t5atmad2jnk3e58ahtp749d9trctt9z3wryxyzt5pspp0nd0];\n    set true into admins[aleo1z9y9afh0h6dnyj3f0hvjc4mhayjy06fj42ppcq0rvpmmyky6fuzs449sjr];\n    set true into admins[aleo19x0ctad8llm9y0qssw7eup045c5wxxp6k4al3n0d5r8maulkzu8sh3jwew];\n    set true into admins[aleo16ycrg9g4208lp5y4g5s3gn43xknc5gdsr7wjrpqq9htznj5qk5yqd6px5a];\n    set true into admins[aleo1q59hxe2zmexlu4vgtmtmvyxm4ew047zlf50h5l5zsrdvljusdvrqn78u7s];\n\n\n\n\nfunction update_admin:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as signature.public;\n    input r3 as address.public;\n    input r4 as signature.public;\n    input r5 as address.public;\n    input r6 as signature.public;\n    input r7 as address.public;\n    input r8 as u64.public;\n    cast  r0 r1 into r9 as [address; 2u32];\n    hash.bhp256 r9 into r10 as field;\n    cast r10 1u8 r8 into r11 as admin_operation;\n    hash.bhp256 r11 into r12 as field;\n    sign.verify r2 r3 r12 into r13;\n    sign.verify r4 r5 r12 into r14;\n    sign.verify r6 r7 r12 into r15;\n    and r13 r14 into r16;\n    and r16 r15 into r17;\n    assert.eq r17 true;\n    assert.neq r3 r5;\n    assert.neq r3 r7;\n    assert.neq r5 r7;\n    async update_admin r0 r1 r3 r5 r7 r11 into r18;\n    output r18 as grant_disbursement.aleo/update_admin.future;\n\nfinalize update_admin:\n    input r0 as address.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as address.public;\n    input r4 as address.public;\n    input r5 as admin_operation.public;\n    get admins[r2] into r6;\n    get admins[r3] into r7;\n    get admins[r4] into r8;\n    and r6 r7 into r9;\n    and r9 r8 into r10;\n    assert.eq r10 true;\n    contains admin_operations[r5.request_id] into r11;\n    assert.eq r11 false;\n    set r5 into admin_operations[r5.request_id];\n    remove admins[r0];\n    set true into admins[r1];\n\n\n\n\nfunction update_timestamp:\n    input r0 as u64.public;\n    input r1 as signature.public;\n    input r2 as address.public;\n    input r3 as signature.public;\n    input r4 as address.public;\n    input r5 as signature.public;\n    input r6 as address.public;\n    input r7 as u64.public;\n    hash.bhp256 r0 into r8 as field;\n    cast r8 0u8 r7 into r9 as admin_operation;\n    hash.bhp256 r9 into r10 as field;\n    sign.verify r1 r2 r10 into r11;\n    sign.verify r3 r4 r10 into r12;\n    sign.verify r5 r6 r10 into r13;\n    and r11 r12 into r14;\n    and r14 r13 into r15;\n    assert.eq r15 true;\n    assert.neq r2 r4;\n    assert.neq r2 r6;\n    assert.neq r4 r6;\n    async update_timestamp r0 r2 r4 r6 r9 into r16;\n    output r16 as grant_disbursement.aleo/update_timestamp.future;\n\nfinalize update_timestamp:\n    input r0 as u64.public;\n    input r1 as address.public;\n    input r2 as address.public;\n    input r3 as address.public;\n    input r4 as admin_operation.public;\n    get admins[r1] into r5;\n    get admins[r2] into r6;\n    get admins[r3] into r7;\n    and r5 r6 into r8;\n    and r8 r7 into r9;\n    assert.eq r9 true;\n    contains admin_operations[r4.request_id] into r10;\n    assert.eq r10 false;\n    set r4 into admin_operations[r4.request_id];\n    set r0 into timestamp[0u8];\n\n\n\n\nfunction create_grant:\n    input r0 as u64.public;\n    input r1 as u64.public;\n    input r2 as u64.public;\n    input r3 as address.public;\n    input r4 as address.public;\n    input r5 as u64.public;\n    input r6 as u64.public;\n    input r7 as u64.public;\n    call pondo_core_protocolv1.aleo/deposit_public_as_signer r1 r2 grant_disbursement.aleo into r8;\n    cast r2 into r9 as u128;\n    call multi_token_support_programv1.aleo/transfer_public_as_signer 1751493913335802797273486270793650302076377624243810059080883537084141842600field grant_disbursement.aleo r9 into r10;\n    gt r5 r6 into r11;\n    assert.eq r11 true;\n    gt r7 r6 into r12;\n    assert.eq r12 true;\n    async create_grant r8 r10 r0 r1 r2 r3 r4 r5 r6 r7 into r13;\n    output r13 as grant_disbursement.aleo/create_grant.future;\n\nfinalize create_grant:\n    input r0 as pondo_core_protocolv1.aleo/deposit_public_as_signer.future;\n    input r1 as multi_token_support_programv1.aleo/transfer_public_as_signer.future;\n    input r2 as u64.public;\n    input r3 as u64.public;\n    input r4 as u64.public;\n    input r5 as address.public;\n    input r6 as address.public;\n    input r7 as u64.public;\n    input r8 as u64.public;\n    input r9 as u64.public;\n    await r0;\n    await r1;\n    cast r3 r4 r5 r6 r7 r8 r9 into r10 as Grant;\n    get timestamp[0u8] into r11;\n    lt r11 r10.start_timestamp into r12;\n    assert.eq r12 true;\n    contains grants[r2] into r13;\n    not r13 into r14;\n    assert.eq r14 true;\n    set r10 into grants[r2];\n\n\n\n\nfunction withdraw_rewards:\n    input r0 as u64.private;\n    input r1 as u64.private;\n    cast r1 into r2 as u128;\n    call multi_token_support_programv1.aleo/transfer_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field self.caller r2 into r3;\n    async withdraw_rewards r3 r0 r1 self.caller into r4;\n    output r4 as grant_disbursement.aleo/withdraw_rewards.future;\n\nfinalize withdraw_rewards:\n    input r0 as multi_token_support_programv1.aleo/transfer_public.future;\n    input r1 as u64.public;\n    input r2 as u64.public;\n    input r3 as address.public;\n    await r0;\n    get grants[r1] into r4;\n    assert.eq r3 r4.recipient_rewards_key;\n    get timestamp[0u8] into r5;\n    lt r5 r4.cliff_timestamp into r6;\n    assert.eq r6 true;\n    gte r5 r4.start_timestamp into r7;\n    assert.eq r7 true;\n    sub r4.paleo_amount r2 into r8;\n    get pondo_core_protocolv1.aleo/protocol_state[0u8] into r9;\n    is.neq r9 1u8 into r10;\n    assert.eq r10 true;\n    get multi_token_support_programv1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r11;\n    get pondo_core_protocolv1.aleo/owed_commission[0u8] into r12;\n    cast r12 into r13 as u128;\n    add r11.supply r13 into r14;\n    get pondo_core_protocolv1.aleo/balances[0u8] into r15;\n    get.or_use credits.aleo/account[grant_disbursement.aleo] 0u64 into r16;\n    get pondo_core_protocolv1.aleo/balances[2u8] into r17;\n    add r15 r16 into r18;\n    sub r18 r17 into r19;\n    cast r19 into r20 as u128;\n    cast r8 into r21 as u128;\n    mul r20 r21 into r22;\n    div r22 r14 into r23;\n    cast r4.credits_amount into r24 as u128;\n    gte r23 r24 into r25;\n    assert.eq r25 true;\n    cast r4.credits_amount r8 r4.recipient_rewards_key r4.recipient_principal_key r4.start_timestamp r4.cliff_timestamp r4.fully_vested_timestamp into r26 as Grant;\n    set r26 into grants[r1];\n\n\n\n\nfunction withdraw_principal:\n    input r0 as u64.private;\n    input r1 as u64.private;\n    cast r1 into r2 as u128;\n    call multi_token_support_programv1.aleo/transfer_public 1751493913335802797273486270793650302076377624243810059080883537084141842600field self.caller r2 into r3;\n    async withdraw_principal r3 r0 r1 self.caller into r4;\n    output r4 as grant_disbursement.aleo/withdraw_principal.future;\n\nfinalize withdraw_principal:\n    input r0 as multi_token_support_programv1.aleo/transfer_public.future;\n    input r1 as u64.public;\n    input r2 as u64.public;\n    input r3 as address.public;\n    await r0;\n    get grants[r1] into r4;\n    assert.eq r3 r4.recipient_principal_key;\n    get timestamp[0u8] into r5;\n    gte r5 r4.cliff_timestamp into r6;\n    assert.eq r6 true;\n    sub r4.paleo_amount r2 into r7;\n    get pondo_core_protocolv1.aleo/protocol_state[0u8] into r8;\n    is.neq r8 1u8 into r9;\n    assert.eq r9 true;\n    get multi_token_support_programv1.aleo/registered_tokens[1751493913335802797273486270793650302076377624243810059080883537084141842600field] into r10;\n    get pondo_core_protocolv1.aleo/owed_commission[0u8] into r11;\n    cast r11 into r12 as u128;\n    add r10.supply r12 into r13;\n    get pondo_core_protocolv1.aleo/balances[0u8] into r14;\n    get.or_use credits.aleo/account[grant_disbursement.aleo] 0u64 into r15;\n    get pondo_core_protocolv1.aleo/balances[2u8] into r16;\n    add r14 r15 into r17;\n    sub r17 r16 into r18;\n    cast r18 into r19 as u128;\n    cast r7 into r20 as u128;\n    mul r19 r20 into r21;\n    div r21 r13 into r22;\n    sub r5 r4.start_timestamp into r23;\n    sub r4.fully_vested_timestamp r4.start_timestamp into r24;\n    cast r4.credits_amount into r25 as u128;\n    cast r23 into r26 as u128;\n    mul r25 r26 into r27;\n    cast r24 into r28 as u128;\n    div r27 r28 into r29;\n    cast r4.credits_amount into r30 as u128;\n    lt r29 r30 into r31;\n    cast r4.credits_amount into r32 as u128;\n    ternary r31 r29 r32 into r33;\n    cast r4.credits_amount into r34 as u128;\n    sub r34 r33 into r35;\n    cast r35 into r36 as u128;\n    gte r22 r36 into r37;\n    assert.eq r37 true;\n    cast r4.credits_amount r7 r4.recipient_rewards_key r4.recipient_principal_key r4.start_timestamp r4.cliff_timestamp r4.fully_vested_timestamp into r38 as Grant;\n    set r38 into grants[r1];\n\n",
  "test_program.aleo": "import credits.aleo;\nimport multi_token_support_programv1.aleo;\nimport pondo_oraclev1.aleo;\nimport pondo_staked_aleo_tokenv1.aleo;\nimport pondo_tokenv1.aleo;\nimport pondo_delegator1v1.aleo;\nimport pondo_delegator2v1.aleo;\nimport pondo_delegator3v1.aleo;\nimport pondo_delegator4v1.aleo;\nimport pondo_delegator5v1.aleo;\nimport pondo_core_protocolv1.aleo;\nprogram test_program.aleo;\n\n\nstruct TokenMetadata:\n    token_id as field;\n    name as u128;\n    symbol as u128;\n    decimals as u8;\n    supply as u128;\n    max_supply as u128;\n    admin as address;\n    external_authorization_required as boolean;\n    external_authorization_party as address;\n\nstruct TokenOwner:\n    account as address;\n    token_id as field;\n\n\nstruct validator_state:\n    validator as address;\n    commission as u8;\n\n\n\nfunction double_deposit:\n    input r0 as u64.private;\n    input r1 as u64.private;\n    call pondo_core_protocolv1.aleo/deposit_public_as_signer r0 r1 test_program.aleo into r2;\n    call pondo_core_protocolv1.aleo/deposit_public_as_signer r0 r1 test_program.aleo into r3;\n    async double_deposit r2 r3 into r4;\n    output r4 as test_program.aleo/double_deposit.future;\n\nfinalize double_deposit:\n    input r0 as pondo_core_protocolv1.aleo/deposit_public_as_signer.future;\n    input r1 as pondo_core_protocolv1.aleo/deposit_public_as_signer.future;\n    await r0;\n    await r1;\n\n\n\n\nfunction deposit_withdraw_as_signer:\n    input r0 as u64.private;\n    input r1 as u64.private;\n    call pondo_core_protocolv1.aleo/deposit_public_as_signer r0 r1 test_program.aleo into r2;\n    call pondo_core_protocolv1.aleo/withdraw_public_as_signer r1 into r3;\n    async deposit_withdraw_as_signer r2 r3 into r4;\n    output r4 as test_program.aleo/deposit_withdraw_as_signer.future;\n\nfinalize deposit_withdraw_as_signer:\n    input r0 as pondo_core_protocolv1.aleo/deposit_public_as_signer.future;\n    input r1 as pondo_core_protocolv1.aleo/withdraw_public_as_signer.future;\n    await r0;\n    await r1;\n\n\n\n\nfunction deposit_instant_withdraw_signer:\n    input r0 as u64.private;\n    input r1 as u64.private;\n    input r2 as boolean.private;\n    call pondo_core_protocolv1.aleo/deposit_public_as_signer r0 r1 test_program.aleo into r3;\n    cast r0 into r4 as u128;\n    cast r0 into r5 as u128;\n    mul r5 025u128 into r6;\n    div r6 10_000u128 into r7;\n    sub r4 r7 into r8;\n    cast r0 into r9 as u128;\n    ternary r2 r8 r9 into r10;\n    cast r10 into r11 as u64;\n    call pondo_core_protocolv1.aleo/instant_withdraw_public_signer r1 r11 into r12;\n    async deposit_instant_withdraw_signer r3 r12 into r13;\n    output r13 as test_program.aleo/deposit_instant_withdraw_signer.future;\n\nfinalize deposit_instant_withdraw_signer:\n    input r0 as pondo_core_protocolv1.aleo/deposit_public_as_signer.future;\n    input r1 as pondo_core_protocolv1.aleo/instant_withdraw_public_signer.future;\n    await r0;\n    await r1;\n\n\n\n\nfunction deposit_withdraw:\n    input r0 as u64.private;\n    input r1 as u64.private;\n    input r2 as boolean.private;\n    cast r0 into r3 as u128;\n    call multi_token_support_programv1.aleo/transfer_from_public 3443843282313283355522573239085696902919850365217539366784739393210722344986field self.caller test_program.aleo r3 into r4;\n    cast r0 into r5 as u128;\n    call multi_token_support_programv1.aleo/approve_public 3443843282313283355522573239085696902919850365217539366784739393210722344986field pondo_core_protocolv1.aleo r5 into r6;\n    call pondo_core_protocolv1.aleo/deposit_public r0 r1 test_program.aleo into r7;\n    call pondo_core_protocolv1.aleo/withdraw_public r1 into r8;\n    async deposit_withdraw r4 r6 r7 r8 into r9;\n    output r9 as test_program.aleo/deposit_withdraw.future;\n\nfinalize deposit_withdraw:\n    input r0 as multi_token_support_programv1.aleo/transfer_from_public.future;\n    input r1 as multi_token_support_programv1.aleo/approve_public.future;\n    input r2 as pondo_core_protocolv1.aleo/deposit_public.future;\n    input r3 as pondo_core_protocolv1.aleo/withdraw_public.future;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n\n\n\n\nfunction deposit_instant_withdraw:\n    input r0 as u64.private;\n    input r1 as u64.private;\n    input r2 as boolean.private;\n    cast r0 into r3 as u128;\n    call multi_token_support_programv1.aleo/transfer_from_public 3443843282313283355522573239085696902919850365217539366784739393210722344986field self.caller test_program.aleo r3 into r4;\n    cast r0 into r5 as u128;\n    call multi_token_support_programv1.aleo/approve_public 3443843282313283355522573239085696902919850365217539366784739393210722344986field pondo_core_protocolv1.aleo r5 into r6;\n    cast r0 into r7 as u128;\n    cast r0 into r8 as u128;\n    mul r8 025u128 into r9;\n    div r9 10_000u128 into r10;\n    sub r7 r10 into r11;\n    cast r0 into r12 as u128;\n    ternary r2 r11 r12 into r13;\n    call pondo_core_protocolv1.aleo/deposit_public r0 r1 test_program.aleo into r14;\n    cast r13 into r15 as u64;\n    call pondo_core_protocolv1.aleo/instant_withdraw_public r1 r15 into r16;\n    async deposit_instant_withdraw r4 r6 r14 r16 into r17;\n    output r17 as test_program.aleo/deposit_instant_withdraw.future;\n\nfinalize deposit_instant_withdraw:\n    input r0 as multi_token_support_programv1.aleo/transfer_from_public.future;\n    input r1 as multi_token_support_programv1.aleo/approve_public.future;\n    input r2 as pondo_core_protocolv1.aleo/deposit_public.future;\n    input r3 as pondo_core_protocolv1.aleo/instant_withdraw_public.future;\n    await r0;\n    await r1;\n    await r2;\n    await r3;\n\n"
};