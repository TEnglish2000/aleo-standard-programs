AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy a Dockerized Node.js bot on an EC2 instance.
Parameters:
  KeyPairName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  PondoBotAMIId:
    Description: Amazon Machine Image ID
    Type: String
    Default: ami-093467ec28ae4fe03
  PondoBotRepository:
    Description: Name of the Docker repository in private ECR
    Type: String
    Default: 287641434880.dkr.ecr.ap-southeast-1.amazonaws.com/pondo-bot
  LatestTag:
    Description: The latest image tag to be used for the Docker image
    Type: String

Resources:
  PondoBotInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 'c6a.4xlarge'
      KeyName: !Ref KeyPairName
      ImageId: !Ref PondoBotAMIId
      SecurityGroupIds:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Install and start the CloudWatch Logs agent
          sudo yum update -y
          sudo yum install -y awslogs
          sudo systemctl start awslogsd
          sudo systemctl enable awslogsd.service

          # Install and start docker
          sudo yum update -y
          sudo yum install -y docker
          sudo service docker start
          aws ecr get-login-password --region ${AWS::Region} | sudo docker login --username AWS --password-stdin ${PondoBotRepository}
          
          sudo docker pull ${PondoBotRepository}:${LatestTag}
          docker run -d --restart always -p 80:80 -p 443:443 ${PondoBotRepository}:$latest_tag
      Tags:
        - Key: Name
          Value: PondoBotInstance

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Enable SSH and HTTP/HTTPS access'
      SecurityGroupIngress:
        - IpProtocol: 'tcp'
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: 'tcp'
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'

Outputs:
  InstanceId:
    Description: 'InstanceId of the newly created Pondo Bot EC2 instance'
    Value: !Ref PondoBotInstance
  PublicIP:
    Description: 'Public IP address of the newly created Pondo Bot EC2 instance'
    Value: !GetAtt PondoBotInstance.PublicIp